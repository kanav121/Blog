<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Blog</title>
<link>https://mekanavsharma.github.io/Blog/index.html</link>
<atom:link href="https://mekanavsharma.github.io/Blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Collection of my Projects and Ideas</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Thu, 02 May 2024 18:30:00 GMT</lastBuildDate>
<item>
  <title>FastAI Course Lecture 6 Part 2 Notes</title>
  <dc:creator>Kanav Sharma</dc:creator>
  <link>https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect6_Part2/index.html</link>
  <description><![CDATA[ 




<p>In <a href="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect6_Part1/">Lecture6-Part1</a> we build our model using <code>resent26d</code> architecture with best accuracy <code>73%</code>. In this notebook we will be using <code>ConvNeXt</code> model and aiming towards higher accuracy.</p>
<section id="install-fastai" class="level3">
<h3 class="anchored" data-anchor-id="install-fastai">Install FastAI</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#hide</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Uqq fastbook</span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install timm</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fastbook</span>
<span id="cb1-6">fastbook.setup_book()</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> timm</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#hide</span></span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastbook <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.widgets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
<pre><code>Requirement already satisfied: timm in /opt/conda/lib/python3.10/site-packages (0.9.16)
Requirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (from timm) (2.1.2)
Requirement already satisfied: torchvision in /opt/conda/lib/python3.10/site-packages (from timm) (0.16.2)
Requirement already satisfied: pyyaml in /opt/conda/lib/python3.10/site-packages (from timm) (6.0.1)
Requirement already satisfied: huggingface_hub in /opt/conda/lib/python3.10/site-packages (from timm) (0.20.3)
Requirement already satisfied: safetensors in /opt/conda/lib/python3.10/site-packages (from timm) (0.4.2)
Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from huggingface_hub-&gt;timm) (3.13.1)
Requirement already satisfied: fsspec&gt;=2023.5.0 in /opt/conda/lib/python3.10/site-packages (from huggingface_hub-&gt;timm) (2024.2.0)
Requirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from huggingface_hub-&gt;timm) (2.31.0)
Requirement already satisfied: tqdm&gt;=4.42.1 in /opt/conda/lib/python3.10/site-packages (from huggingface_hub-&gt;timm) (4.66.1)
Requirement already satisfied: typing-extensions&gt;=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface_hub-&gt;timm) (4.9.0)
Requirement already satisfied: packaging&gt;=20.9 in /opt/conda/lib/python3.10/site-packages (from huggingface_hub-&gt;timm) (21.3)
Requirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch-&gt;timm) (1.12)
Requirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch-&gt;timm) (3.2.1)
Requirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch-&gt;timm) (3.1.2)
Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from torchvision-&gt;timm) (1.26.4)
Requirement already satisfied: pillow!=8.3.*,&gt;=5.3.0 in /opt/conda/lib/python3.10/site-packages (from torchvision-&gt;timm) (9.5.0)
Requirement already satisfied: pyparsing!=3.0.5,&gt;=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging&gt;=20.9-&gt;huggingface_hub-&gt;timm) (3.1.1)
Requirement already satisfied: MarkupSafe&gt;=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2-&gt;torch-&gt;timm) (2.1.3)
Requirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /opt/conda/lib/python3.10/site-packages (from requests-&gt;huggingface_hub-&gt;timm) (3.3.2)
Requirement already satisfied: idna&lt;4,&gt;=2.5 in /opt/conda/lib/python3.10/site-packages (from requests-&gt;huggingface_hub-&gt;timm) (3.6)
Requirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests-&gt;huggingface_hub-&gt;timm) (1.26.18)
Requirement already satisfied: certifi&gt;=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests-&gt;huggingface_hub-&gt;timm) (2024.2.2)
Requirement already satisfied: mpmath&gt;=0.19 in /opt/conda/lib/python3.10/site-packages (from sympy-&gt;torch-&gt;timm) (1.3.0)</code></pre>
</section>
<section id="lets-download-food-data-from-fastai" class="level2">
<h2 class="anchored" data-anchor-id="lets-download-food-data-from-fastai">Let’s download food data from FastAI</h2>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content'</span>)</span>
<span id="cb3-2">untar_data(URLs.FOOD, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>path)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># actual path to train image folder</span></span>
<span id="cb3-5">train_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/food-101/images'</span></span>
<span id="cb3-6">test_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/food-101/test'</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create Test folder</span></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb3-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb3-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> shutil</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> move_images_to_test(source_folder, test_folder, percentage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>):</span>
<span id="cb3-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the test folder if it doesn't exist</span></span>
<span id="cb3-16">    os.makedirs(test_folder, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-17"></span>
<span id="cb3-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate through each subfolder in the source folder</span></span>
<span id="cb3-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> subfolder <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(source_folder):</span>
<span id="cb3-20">        subfolder_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(source_folder, subfolder)</span>
<span id="cb3-21"></span>
<span id="cb3-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if it's a directory</span></span>
<span id="cb3-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.isdir(subfolder_path):</span>
<span id="cb3-24">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of all image files in the subfolder</span></span>
<span id="cb3-25">            image_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [f <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(subfolder_path) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> f.endswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.jpg'</span>)]</span>
<span id="cb3-26"></span>
<span id="cb3-27">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the number of images to move</span></span>
<span id="cb3-28">            num_images_to_move <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(image_files) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> percentage)</span>
<span id="cb3-29"></span>
<span id="cb3-30">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Randomly select images to move</span></span>
<span id="cb3-31">            images_to_move <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.sample(image_files, num_images_to_move)</span>
<span id="cb3-32"></span>
<span id="cb3-33">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move selected images to the test folder</span></span>
<span id="cb3-34">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> image <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> images_to_move:</span>
<span id="cb3-35">                source_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(subfolder_path, image)</span>
<span id="cb3-36">                dest_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(test_folder, image)</span>
<span id="cb3-37">                shutil.move(source_path, dest_path)</span>
<span id="cb3-38"></span>
<span id="cb3-39"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb3-40">    move_images_to_test(train_path, test_path, percentage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>)</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<div>
<progress value="5686607872" class="" max="5686607260" style="width:300px; height:20px; vertical-align: middle;">
</progress>
<p>100.00% [5686607872/5686607260 02:31&lt;00:00]</p>
</div>
</section>
<section id="lets-make-it-faster" class="level2">
<h2 class="anchored" data-anchor-id="lets-make-it-faster">Let’s make it faster</h2>
<p>Last time, we encountered a problem even though we were using the fastest architecture. It was still taking too long. For a change, let’s resize the images to <code>256</code> pixels. This will decrease the size of each pixel and allow us to train our model faster.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataLoaders.from_folder(path, valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>,</span>
<span id="cb4-2">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'squish'</span>),</span>
<span id="cb4-3">    batch_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>))</span>
<span id="cb4-4"></span>
<span id="cb4-5">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect6_Part2/Lecture_6_Road_To_The_Top_Part_2_self_files/Lecture_6_Road_To_The_Top_Part_2_self_4_0.png" class="img-fluid"></p>
<section id="make-it-into-a-function" class="level3">
<h3 class="anchored" data-anchor-id="make-it-into-a-function">Make it into a function</h3>
<p>In this notebook, we will be experimenting with lots of models, data(image) augmentation, and other techniques. So instead of repeating the same code every time, let’s create a function that can be called whenever needed.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train(arch, item, batch, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0002</span>):</span>
<span id="cb5-2">    dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataLoaders.from_folder(path, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>item, batch_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch)</span>
<span id="cb5-3">    learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, arch, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb5-4">    learn.fine_tune(epochs, learning_rate)</span>
<span id="cb5-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> learn</span></code></pre></div>
<p>To ensure consistent function behavior, we have rigidly set the number of epochs and the learning rate value.</p>
</section>
<section id="call-the-function" class="level3">
<h3 class="anchored" data-anchor-id="call-the-function">Call the function</h3>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resnet26d'</span>, item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>),batch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>))</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<table class="table">
<thead>
<tr class="header">
<th>epoch</th>
<th>train_loss</th>
<th>valid_loss</th>
<th>error_rate</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>3.727076</td>
<td>2.929649</td>
<td>0.664554</td>
<td>04:58</td>
</tr>
</tbody>
</table>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<table class="table">
<thead>
<tr class="header">
<th>epoch</th>
<th>train_loss</th>
<th>valid_loss</th>
<th>error_rate</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>3.250653</td>
<td>2.632962</td>
<td>0.618911</td>
<td>05:03</td>
</tr>
<tr class="even">
<td>1</td>
<td>2.837729</td>
<td>2.394110</td>
<td>0.584109</td>
<td>05:09</td>
</tr>
<tr class="odd">
<td>2</td>
<td>2.680722</td>
<td>2.286321</td>
<td>0.563812</td>
<td>05:10</td>
</tr>
<tr class="even">
<td>3</td>
<td>2.653321</td>
<td>2.266845</td>
<td>0.560149</td>
<td>05:08</td>
</tr>
</tbody>
</table>
<p>Though we were able to reduce the time but we got higher error rate.</p>
</section>
</section>
<section id="convnext-model" class="level2">
<h2 class="anchored" data-anchor-id="convnext-model">ConvNeXt model</h2>
<p>In our previous notebook, we discussed how the <strong>convnext_tiny_in22k</strong> is go-to model. We would like to reduce image size to <strong>192</strong>(multiple 32) &amp; use <strong>squish</strong> method for data augmentation.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">arch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'convnext_tiny_in22k'</span></span>
<span id="cb7-2"></span>
<span id="cb7-3">learn_squish <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train(arch, item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'squish'</span>),batch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>))</span></code></pre></div>
<pre><code>/opt/conda/lib/python3.10/site-packages/timm/models/_factory.py:117: UserWarning: Mapping deprecated model name convnext_tiny_in22k to current convnext_tiny.fb_in22k.
  model = create_fn(



model.safetensors:   0%|          | 0.00/178M [00:00&lt;?, ?B/s]</code></pre>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<table class="table">
<thead>
<tr class="header">
<th>epoch</th>
<th>train_loss</th>
<th>valid_loss</th>
<th>error_rate</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>2.464850</td>
<td>1.882828</td>
<td>0.412178</td>
<td>17:27</td>
</tr>
</tbody>
</table>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<table class="table">
<thead>
<tr class="header">
<th>epoch</th>
<th>train_loss</th>
<th>valid_loss</th>
<th>error_rate</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>2.082745</td>
<td>1.638774</td>
<td>0.375693</td>
<td>21:36</td>
</tr>
<tr class="even">
<td>1</td>
<td>1.828319</td>
<td>1.418455</td>
<td>0.350842</td>
<td>21:36</td>
</tr>
<tr class="odd">
<td>2</td>
<td>1.719477</td>
<td>1.355143</td>
<td>0.342327</td>
<td>21:34</td>
</tr>
<tr class="even">
<td>3</td>
<td>1.633262</td>
<td>1.351079</td>
<td>0.340000</td>
<td>21:38</td>
</tr>
</tbody>
</table>
</section>
<section id="data-augmentation" class="level2">
<h2 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h2>
<section id="crop" class="level3">
<h3 class="anchored" data-anchor-id="crop">Crop</h3>
<p><strong>Squish</strong> has already been performed in the last scenario, so let’s check on crop method, which is default in Fastai.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">learn_crop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train(arch, item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>),batch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>))</span></code></pre></div>
<pre><code>/opt/conda/lib/python3.10/site-packages/timm/models/_factory.py:117: UserWarning: Mapping deprecated model name convnext_tiny_in22k to current convnext_tiny.fb_in22k.
  model = create_fn(</code></pre>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<table class="table">
<thead>
<tr class="header">
<th>epoch</th>
<th>train_loss</th>
<th>valid_loss</th>
<th>error_rate</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>2.491307</td>
<td>1.843047</td>
<td>0.401188</td>
<td>17:40</td>
</tr>
</tbody>
</table>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<table class="table">
<thead>
<tr class="header">
<th>epoch</th>
<th>train_loss</th>
<th>valid_loss</th>
<th>error_rate</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>2.034851</td>
<td>1.604407</td>
<td>0.364554</td>
<td>21:32</td>
</tr>
<tr class="even">
<td>1</td>
<td>1.804160</td>
<td>1.384419</td>
<td>0.342921</td>
<td>21:39</td>
</tr>
<tr class="odd">
<td>2</td>
<td>1.620802</td>
<td>1.324999</td>
<td>0.334158</td>
<td>21:28</td>
</tr>
<tr class="even">
<td>3</td>
<td>1.583603</td>
<td>1.313850</td>
<td>0.331733</td>
<td>21:29</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">learn_crop.export(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lecture6_Part2_Food_Convnext_Tiny_Crop.pkl'</span>)</span></code></pre></div>
</section>
<section id="padding" class="level3">
<h3 class="anchored" data-anchor-id="padding">Padding</h3>
<p>It keeps all the original images without transforming them, unlike squish &amp; crop, which change size of the images.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">learn_padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train(arch, item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>), method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ResizeMethod.Pad, pad_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PadMode.Zeros),</span>
<span id="cb12-2">      batch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>), min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>))</span></code></pre></div>
<pre><code>/opt/conda/lib/python3.10/site-packages/timm/models/_factory.py:117: UserWarning: Mapping deprecated model name convnext_tiny_in22k to current convnext_tiny.fb_in22k.
  model = create_fn(</code></pre>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<table class="table">
<thead>
<tr class="header">
<th>epoch</th>
<th>train_loss</th>
<th>valid_loss</th>
<th>error_rate</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>2.619984</td>
<td>1.938507</td>
<td>0.432228</td>
<td>17:25</td>
</tr>
</tbody>
</table>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<table class="table">
<thead>
<tr class="header">
<th>epoch</th>
<th>train_loss</th>
<th>valid_loss</th>
<th>error_rate</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>2.151396</td>
<td>1.702708</td>
<td>0.392723</td>
<td>21:27</td>
</tr>
<tr class="even">
<td>1</td>
<td>1.879488</td>
<td>1.477281</td>
<td>0.369158</td>
<td>21:37</td>
</tr>
<tr class="odd">
<td>2</td>
<td>1.783989</td>
<td>1.412986</td>
<td>0.354554</td>
<td>21:28</td>
</tr>
<tr class="even">
<td>3</td>
<td>1.738043</td>
<td>1.404341</td>
<td>0.354356</td>
<td>21:25</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">learn_padding.export(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lecture6_Part2_Food_Convnext_Tiny_Padding.pkl'</span>)</span></code></pre></div>
<section id="best-among-these-three-is-padding-method.-lets-obtain-its-learning-rate-see-if-that-needs-to-be-changed." class="level5">
<h5 class="anchored" data-anchor-id="best-among-these-three-is-padding-method.-lets-obtain-its-learning-rate-see-if-that-needs-to-be-changed.">Best among these three is Padding method. Let’s obtain it’s learning rate &amp; see if that needs to be changed.</h5>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">learn_crop.lr_find(suggest_funcs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(valley, slide))</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<pre><code>SuggestedLRs(valley=4.365158383734524e-05, slide=0.019054606556892395)</code></pre>
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect6_Part2/Lecture_6_Road_To_The_Top_Part_2_self_files/Lecture_6_Road_To_The_Top_Part_2_self_22_3.png" class="img-fluid"></p>
<p>As far as learning rate is concerned we are good to go.</p>
</section>
</section>
<section id="test-time-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="test-time-augmentation">Test time augmentation</h3>
<p>Instead of making predictions on the original validation image, the model makes predictions on multiple augmented versions of the test image and combines these predictions.</p>
<p>For more refer : <a href="https://nbviewer.org/github/fastai/fastbook/blob/master/07_sizing_and_tta.ipynb#Test-Time-Augmentation">Test Time Augmentation</a>.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">tta_preds,targs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn_crop.tta(dl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>learn_crop.dls.valid)</span>
<span id="cb17-2">error_rate(tta_preds, targs)</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<div>
<progress value="0" class="" max="1" style="width:300px; height:20px; vertical-align: middle;">
</progress>
</div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<pre><code>TensorBase(0.3120)</code></pre>
</section>
</section>
<section id="scaling-up" class="level2">
<h2 class="anchored" data-anchor-id="scaling-up">Scaling Up</h2>
<p>Now that we have identified the best possible model and data augmentation type, let’s scale it up by increasing the image size back to <code>512</code> &amp; number of epoch to <code>6</code>.</p>
<p>With more than 5 epochs, we are in danger of overfitting. (<code>10</code> is certainly <strong>overfitting</strong> because our model has seen every image 10 times by now).</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train(arch,item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>),batch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>), min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>), epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<pre><code>/opt/conda/lib/python3.10/site-packages/timm/models/_factory.py:117: UserWarning: Mapping deprecated model name convnext_tiny_in22k to current convnext_tiny.fb_in22k.
  model = create_fn(



model.safetensors:   0%|          | 0.00/178M [00:00&lt;?, ?B/s]</code></pre>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<table class="table">
<thead>
<tr class="header">
<th>epoch</th>
<th>train_loss</th>
<th>valid_loss</th>
<th>error_rate</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>2.119423</td>
<td>1.545519</td>
<td>0.324604</td>
<td>31:25</td>
</tr>
</tbody>
</table>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<table class="table">
<thead>
<tr class="header">
<th>epoch</th>
<th>train_loss</th>
<th>valid_loss</th>
<th>error_rate</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.857518</td>
<td>1.425361</td>
<td>0.301139</td>
<td>35:32</td>
</tr>
<tr class="even">
<td>1</td>
<td>1.573771</td>
<td>1.231033</td>
<td>0.280644</td>
<td>35:34</td>
</tr>
<tr class="odd">
<td>2</td>
<td>1.429572</td>
<td>1.093103</td>
<td>0.265149</td>
<td>35:35</td>
</tr>
<tr class="even">
<td>3</td>
<td>1.246169</td>
<td>1.031862</td>
<td>0.256931</td>
<td>35:35</td>
</tr>
<tr class="odd">
<td>4</td>
<td>1.202549</td>
<td>1.000573</td>
<td>0.249356</td>
<td>35:35</td>
</tr>
<tr class="even">
<td>5</td>
<td>1.172318</td>
<td>0.974019</td>
<td>0.246089</td>
<td>35:34</td>
</tr>
<tr class="odd">
<td>6</td>
<td>1.095220</td>
<td>0.961513</td>
<td>0.242673</td>
<td>35:36</td>
</tr>
<tr class="even">
<td>7</td>
<td>1.071022</td>
<td>0.952826</td>
<td>0.242079</td>
<td>35:40</td>
</tr>
<tr class="odd">
<td>8</td>
<td>1.101088</td>
<td>0.950712</td>
<td>0.241139</td>
<td>35:38</td>
</tr>
<tr class="even">
<td>9</td>
<td>1.096281</td>
<td>0.950866</td>
<td>0.240545</td>
<td>35:35</td>
</tr>
</tbody>
</table>
<p>This is far more accurate than our previous model.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>We achieved higher accuracy compared to our Part 1 version, but it put too much strain on our GPU. It even crashed at times during the execution of the ‘Scale Up!’ part. In the next notebook, we will learn how to optimize the GPU for better performance.</p>


</section>

 ]]></description>
  <category>Computer Vision</category>
  <category>FastAI</category>
  <guid>https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect6_Part2/index.html</guid>
  <pubDate>Thu, 02 May 2024 18:30:00 GMT</pubDate>
</item>
<item>
  <title>FastAI Course Lecture 6 Part 1 Notes</title>
  <dc:creator>Kanav Sharma</dc:creator>
  <link>https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect6_Part1/index.html</link>
  <description><![CDATA[ 




<section id="computer-vision-models-understanding" class="level2">
<h2 class="anchored" data-anchor-id="computer-vision-models-understanding">Computer Vision Model(s) Understanding</h2>
<p>In <a href="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect3/">previous lecture</a> , we referred to <a href="https://www.kaggle.com/code/jhoward/which-image-models-are-best">Which Image models are best?</a> to understand computer vision models in general and which among them works best.</p>
<p>But this time, we will be deep diving into these models : <a href="https://www.kaggle.com/code/jhoward/the-best-vision-models-for-fine-tuning">Best Vision Model for fine-tuning</a>. We have divided our testing in 2 parts :</p>
<ol type="1">
<li>Existing Images : Our models, such as ConvNext and ResNet, have been trained on a set of 22,000 images from the <strong>ImageNet</strong> dataset. It is highly probable that our model has already been exposed to commonly encountered categories such as cats, cars, musical instruments, and more during its training.<br>
</li>
<li>New Images : Here we are using Images that most probably are not in <strong>ImagNet</strong> dataset, like satellite images, medical images etc.</li>
</ol>
<p>Our key findings :</p>
<ul>
<li><p>In Case 1, both <strong>convnext_tiny_in22k</strong> and <strong>convnext_tiny</strong> emerged as go-to models, selected based on their impressive accuracy and efficient training times.</p></li>
<li><p>In Case 2, models like ViT (Vision Transformer) and Swin demonstrated excellent performance. Their transformer architecture proved beneficial in understanding patterns from the data they were not trained on previously, namely - <strong>vit_small_patch32_224, vit_small_patch16_224, swin_base_patch4_window7_224_in22k</strong>.</p>
<ul>
<li>Tip - ViT model work only on 224 pixel image, so to train our image data on ViT, images should be of 224*224 pixels.</li>
</ul></li>
</ul>
<section id="install-fastai" class="level3">
<h3 class="anchored" data-anchor-id="install-fastai">Install FastAI</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#hide</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Uqq fastbook</span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install timm</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fastbook</span>
<span id="cb1-6">fastbook.setup_book()</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> timm</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#hide</span></span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastbook <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.widgets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
<pre><code>Requirement already satisfied: timm in /opt/conda/lib/python3.10/site-packages (0.9.16)
Requirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (from timm) (2.1.2)
Requirement already satisfied: torchvision in /opt/conda/lib/python3.10/site-packages (from timm) (0.16.2)
Requirement already satisfied: pyyaml in /opt/conda/lib/python3.10/site-packages (from timm) (6.0.1)
Requirement already satisfied: huggingface_hub in /opt/conda/lib/python3.10/site-packages (from timm) (0.20.3)
Requirement already satisfied: safetensors in /opt/conda/lib/python3.10/site-packages (from timm) (0.4.2)
Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from huggingface_hub-&gt;timm) (3.13.1)
Requirement already satisfied: fsspec&gt;=2023.5.0 in /opt/conda/lib/python3.10/site-packages (from huggingface_hub-&gt;timm) (2024.2.0)
Requirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from huggingface_hub-&gt;timm) (2.31.0)
Requirement already satisfied: tqdm&gt;=4.42.1 in /opt/conda/lib/python3.10/site-packages (from huggingface_hub-&gt;timm) (4.66.1)
Requirement already satisfied: typing-extensions&gt;=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface_hub-&gt;timm) (4.9.0)
Requirement already satisfied: packaging&gt;=20.9 in /opt/conda/lib/python3.10/site-packages (from huggingface_hub-&gt;timm) (21.3)
Requirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch-&gt;timm) (1.12)
Requirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch-&gt;timm) (3.2.1)
Requirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch-&gt;timm) (3.1.2)
Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from torchvision-&gt;timm) (1.26.4)
Requirement already satisfied: pillow!=8.3.*,&gt;=5.3.0 in /opt/conda/lib/python3.10/site-packages (from torchvision-&gt;timm) (9.5.0)
Requirement already satisfied: pyparsing!=3.0.5,&gt;=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging&gt;=20.9-&gt;huggingface_hub-&gt;timm) (3.1.1)
Requirement already satisfied: MarkupSafe&gt;=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2-&gt;torch-&gt;timm) (2.1.3)
Requirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /opt/conda/lib/python3.10/site-packages (from requests-&gt;huggingface_hub-&gt;timm) (3.3.2)
Requirement already satisfied: idna&lt;4,&gt;=2.5 in /opt/conda/lib/python3.10/site-packages (from requests-&gt;huggingface_hub-&gt;timm) (3.6)
Requirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests-&gt;huggingface_hub-&gt;timm) (1.26.18)
Requirement already satisfied: certifi&gt;=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests-&gt;huggingface_hub-&gt;timm) (2024.2.2)
Requirement already satisfied: mpmath&gt;=0.19 in /opt/conda/lib/python3.10/site-packages (from sympy-&gt;torch-&gt;timm) (1.3.0)</code></pre>
</section>
<section id="retrieve-food-data-from-fastai" class="level3">
<h3 class="anchored" data-anchor-id="retrieve-food-data-from-fastai">Retrieve Food Data from FastAI</h3>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content'</span>)</span>
<span id="cb3-2">untar_data(URLs.FOOD, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>path)</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<div>
<progress value="5686607872" class="" max="5686607260" style="width:300px; height:20px; vertical-align: middle;">
</progress>
<p>100.00% [5686607872/5686607260 01:54&lt;00:00]</p>
</div>
<pre><code>Path('/content/food-101')</code></pre>
</section>
</section>
<section id="create-test-dataset" class="level2">
<h2 class="anchored" data-anchor-id="create-test-dataset">1. Create Test Dataset</h2>
<p>We don’t have test dataset, so let’s randomly create a <code>test</code> folder containing 15% of the images from train folder. Our model will not be trained on these images.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> shutil</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> move_images_to_test(source_folder, test_folder, percentage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>):</span>
<span id="cb5-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the test folder if it doesn't exist</span></span>
<span id="cb5-7">    os.makedirs(test_folder, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate through each subfolder in the source folder</span></span>
<span id="cb5-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> subfolder <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(source_folder):</span>
<span id="cb5-11">        subfolder_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(source_folder, subfolder)</span>
<span id="cb5-12"></span>
<span id="cb5-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if it's a directory</span></span>
<span id="cb5-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.isdir(subfolder_path):</span>
<span id="cb5-15">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of all image files in the subfolder</span></span>
<span id="cb5-16">            image_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [f <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(subfolder_path) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> f.endswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.jpg'</span>)]</span>
<span id="cb5-17"></span>
<span id="cb5-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the number of images to move</span></span>
<span id="cb5-19">            num_images_to_move <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(image_files) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> percentage)</span>
<span id="cb5-20"></span>
<span id="cb5-21">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Randomly select images to move</span></span>
<span id="cb5-22">            images_to_move <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.sample(image_files, num_images_to_move)</span>
<span id="cb5-23"></span>
<span id="cb5-24">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move selected images to the test folder</span></span>
<span id="cb5-25">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> image <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> images_to_move:</span>
<span id="cb5-26">                source_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(subfolder_path, image)</span>
<span id="cb5-27">                dest_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(test_folder, image)</span>
<span id="cb5-28">                shutil.move(source_path, dest_path)</span>
<span id="cb5-29"></span>
<span id="cb5-30"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb5-31">    train_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/food-101/images'</span>)</span>
<span id="cb5-32">    test_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/food-101/test'</span>)</span>
<span id="cb5-33">    move_images_to_test(train_path, test_path, percentage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>)</span></code></pre></div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df_train_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_json(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/food-101/train.json'</span>)</span>
<span id="cb6-2">df_train_json.head()</span></code></pre></div>
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table class="table">
<colgroup>
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 0%">
</colgroup>
<thead>
<tr class="header">
<th></th>
<th>churros</th>
<th>hot_and_sour_soup</th>
<th>samosa</th>
<th>sashimi</th>
<th>pork_chop</th>
<th>spring_rolls</th>
<th>panna_cotta</th>
<th>beef_tartare</th>
<th>greek_salad</th>
<th>foie_gras</th>
<th>tacos</th>
<th>pad_thai</th>
<th>poutine</th>
<th>ramen</th>
<th>pulled_pork_sandwich</th>
<th>bibimbap</th>
<th>beignets</th>
<th>apple_pie</th>
<th>crab_cakes</th>
<th>risotto</th>
<th>paella</th>
<th>steak</th>
<th>baby_back_ribs</th>
<th>miso_soup</th>
<th>frozen_yogurt</th>
<th>club_sandwich</th>
<th>carrot_cake</th>
<th>falafel</th>
<th>bread_pudding</th>
<th>chicken_wings</th>
<th>gnocchi</th>
<th>caprese_salad</th>
<th>creme_brulee</th>
<th>escargots</th>
<th>chocolate_cake</th>
<th>tiramisu</th>
<th>spaghetti_bolognese</th>
<th>mussels</th>
<th>scallops</th>
<th>baklava</th>
<th>edamame</th>
<th>macaroni_and_cheese</th>
<th>pancakes</th>
<th>garlic_bread</th>
<th>beet_salad</th>
<th>onion_rings</th>
<th>red_velvet_cake</th>
<th>grilled_salmon</th>
<th>chicken_curry</th>
<th>deviled_eggs</th>
<th>caesar_salad</th>
<th>hummus</th>
<th>fish_and_chips</th>
<th>lasagna</th>
<th>peking_duck</th>
<th>guacamole</th>
<th>strawberry_shortcake</th>
<th>clam_chowder</th>
<th>croque_madame</th>
<th>french_onion_soup</th>
<th>beef_carpaccio</th>
<th>fried_rice</th>
<th>donuts</th>
<th>gyoza</th>
<th>ravioli</th>
<th>fried_calamari</th>
<th>spaghetti_carbonara</th>
<th>french_toast</th>
<th>lobster_bisque</th>
<th>ceviche</th>
<th>bruschetta</th>
<th>french_fries</th>
<th>shrimp_and_grits</th>
<th>filet_mignon</th>
<th>hamburger</th>
<th>dumplings</th>
<th>tuna_tartare</th>
<th>sushi</th>
<th>cheese_plate</th>
<th>eggs_benedict</th>
<th>cup_cakes</th>
<th>takoyaki</th>
<th>chocolate_mousse</th>
<th>breakfast_burrito</th>
<th>hot_dog</th>
<th>macarons</th>
<th>waffles</th>
<th>seaweed_salad</th>
<th>cannoli</th>
<th>huevos_rancheros</th>
<th>pizza</th>
<th>chicken_quesadilla</th>
<th>pho</th>
<th>prime_rib</th>
<th>cheesecake</th>
<th>ice_cream</th>
<th>omelette</th>
<th>grilled_cheese_sandwich</th>
<th>lobster_roll_sandwich</th>
<th>nachos</th>
<th>oysters</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>churros/1004234</td>
<td>hot_and_sour_soup/1002782</td>
<td>samosa/1008131</td>
<td>sashimi/1001239</td>
<td>pork_chop/1000802</td>
<td>spring_rolls/1002160</td>
<td>panna_cotta/1001332</td>
<td>beef_tartare/1000431</td>
<td>greek_salad/1007149</td>
<td>foie_gras/1004944</td>
<td>tacos/1002217</td>
<td>pad_thai/1004763</td>
<td>poutine/1005364</td>
<td>ramen/1002305</td>
<td>pulled_pork_sandwich/1004064</td>
<td>bibimbap/1002297</td>
<td>beignets/1000911</td>
<td>apple_pie/1005649</td>
<td>crab_cakes/100038</td>
<td>risotto/1004412</td>
<td>paella/1000388</td>
<td>steak/1000205</td>
<td>baby_back_ribs/1005293</td>
<td>miso_soup/1032814</td>
<td>frozen_yogurt/1000735</td>
<td>club_sandwich/1017761</td>
<td>carrot_cake/1000447</td>
<td>falafel/1003181</td>
<td>bread_pudding/1004499</td>
<td>chicken_wings/1003533</td>
<td>gnocchi/100409</td>
<td>caprese_salad/1001946</td>
<td>creme_brulee/1000711</td>
<td>escargots/1011707</td>
<td>chocolate_cake/1001084</td>
<td>tiramisu/1002946</td>
<td>spaghetti_bolognese/100127</td>
<td>mussels/1015628</td>
<td>scallops/1002727</td>
<td>baklava/1006121</td>
<td>edamame/1000653</td>
<td>macaroni_and_cheese/1004059</td>
<td>pancakes/1009131</td>
<td>garlic_bread/100478</td>
<td>beet_salad/1003501</td>
<td>onion_rings/1017468</td>
<td>red_velvet_cake/1012312</td>
<td>grilled_salmon/1002334</td>
<td>chicken_curry/1004867</td>
<td>deviled_eggs/1008777</td>
<td>caesar_salad/1000016</td>
<td>hummus/1000314</td>
<td>fish_and_chips/1001881</td>
<td>lasagna/1004570</td>
<td>peking_duck/10055</td>
<td>guacamole/1005906</td>
<td>strawberry_shortcake/1009217</td>
<td>clam_chowder/1000678</td>
<td>croque_madame/1009085</td>
<td>french_onion_soup/1006274</td>
<td>beef_carpaccio/1011469</td>
<td>fried_rice/1004221</td>
<td>donuts/100076</td>
<td>gyoza/1003912</td>
<td>ravioli/1008464</td>
<td>fried_calamari/100411</td>
<td>spaghetti_carbonara/1005482</td>
<td>french_toast/100223</td>
<td>lobster_bisque/1022294</td>
<td>ceviche/1006106</td>
<td>bruschetta/1003796</td>
<td>french_fries/100148</td>
<td>shrimp_and_grits/1002860</td>
<td>filet_mignon/1001477</td>
<td>hamburger/100057</td>
<td>dumplings/1000786</td>
<td>tuna_tartare/1010528</td>
<td>sushi/100332</td>
<td>cheese_plate/100370</td>
<td>eggs_benedict/1000104</td>
<td>cup_cakes/1005580</td>
<td>takoyaki/1002167</td>
<td>chocolate_mousse/1013482</td>
<td>breakfast_burrito/1000351</td>
<td>hot_dog/1000288</td>
<td>macarons/1001193</td>
<td>waffles/100242</td>
<td>seaweed_salad/1007167</td>
<td>cannoli/1007970</td>
<td>huevos_rancheros/100439</td>
<td>pizza/1008104</td>
<td>chicken_quesadilla/1004279</td>
<td>pho/1005681</td>
<td>prime_rib/1001089</td>
<td>cheesecake/1001446</td>
<td>ice_cream/1012277</td>
<td>omelette/1001719</td>
<td>grilled_cheese_sandwich/1003153</td>
<td>lobster_roll_sandwich/100009</td>
<td>nachos/100284</td>
<td>oysters/1008124</td>
</tr>
<tr class="even">
<td>1</td>
<td>churros/1013460</td>
<td>hot_and_sour_soup/1003688</td>
<td>samosa/1011601</td>
<td>sashimi/1001363</td>
<td>pork_chop/1006233</td>
<td>spring_rolls/1003056</td>
<td>panna_cotta/1003460</td>
<td>beef_tartare/1005746</td>
<td>greek_salad/1009138</td>
<td>foie_gras/1008577</td>
<td>tacos/1005454</td>
<td>pad_thai/1009595</td>
<td>poutine/1019904</td>
<td>ramen/1002843</td>
<td>pulled_pork_sandwich/1005662</td>
<td>bibimbap/1006709</td>
<td>beignets/1002569</td>
<td>apple_pie/1014775</td>
<td>crab_cakes/1003375</td>
<td>risotto/1009354</td>
<td>paella/1000412</td>
<td>steak/100135</td>
<td>baby_back_ribs/1007102</td>
<td>miso_soup/1038398</td>
<td>frozen_yogurt/100093</td>
<td>club_sandwich/1020435</td>
<td>carrot_cake/1003032</td>
<td>falafel/1008896</td>
<td>bread_pudding/1004540</td>
<td>chicken_wings/1008504</td>
<td>gnocchi/100680</td>
<td>caprese_salad/1024778</td>
<td>creme_brulee/1004352</td>
<td>escargots/1014257</td>
<td>chocolate_cake/1007122</td>
<td>tiramisu/100504</td>
<td>spaghetti_bolognese/1004943</td>
<td>mussels/102234</td>
<td>scallops/1007089</td>
<td>baklava/1014880</td>
<td>edamame/1006400</td>
<td>macaroni_and_cheese/1012508</td>
<td>pancakes/1010075</td>
<td>garlic_bread/1012618</td>
<td>beet_salad/1005864</td>
<td>onion_rings/1019009</td>
<td>red_velvet_cake/1027041</td>
<td>grilled_salmon/1018852</td>
<td>chicken_curry/1014843</td>
<td>deviled_eggs/1010482</td>
<td>caesar_salad/1000435</td>
<td>hummus/1000605</td>
<td>fish_and_chips/1003726</td>
<td>lasagna/1005119</td>
<td>peking_duck/101235</td>
<td>guacamole/1014777</td>
<td>strawberry_shortcake/1013981</td>
<td>clam_chowder/100792</td>
<td>croque_madame/1009303</td>
<td>french_onion_soup/1008414</td>
<td>beef_carpaccio/1013939</td>
<td>fried_rice/1008935</td>
<td>donuts/100576</td>
<td>gyoza/1020354</td>
<td>ravioli/1010610</td>
<td>fried_calamari/10044</td>
<td>spaghetti_carbonara/1007514</td>
<td>french_toast/100344</td>
<td>lobster_bisque/102237</td>
<td>ceviche/1013481</td>
<td>bruschetta/1031947</td>
<td>french_fries/1008945</td>
<td>shrimp_and_grits/1003400</td>
<td>filet_mignon/1002767</td>
<td>hamburger/100517</td>
<td>dumplings/100251</td>
<td>tuna_tartare/1010786</td>
<td>sushi/1005352</td>
<td>cheese_plate/1003804</td>
<td>eggs_benedict/1002786</td>
<td>cup_cakes/1008351</td>
<td>takoyaki/1002237</td>
<td>chocolate_mousse/1018802</td>
<td>breakfast_burrito/1000669</td>
<td>hot_dog/1011661</td>
<td>macarons/1001527</td>
<td>waffles/100353</td>
<td>seaweed_salad/1014295</td>
<td>cannoli/1008331</td>
<td>huevos_rancheros/100486</td>
<td>pizza/1008144</td>
<td>chicken_quesadilla/1009225</td>
<td>pho/1011443</td>
<td>prime_rib/1006320</td>
<td>cheesecake/1004515</td>
<td>ice_cream/101858</td>
<td>omelette/1007843</td>
<td>grilled_cheese_sandwich/10060</td>
<td>lobster_roll_sandwich/1001432</td>
<td>nachos/1009513</td>
<td>oysters/1016229</td>
</tr>
<tr class="odd">
<td>2</td>
<td>churros/1016791</td>
<td>hot_and_sour_soup/1008185</td>
<td>samosa/101365</td>
<td>sashimi/1002556</td>
<td>pork_chop/1019530</td>
<td>spring_rolls/1003507</td>
<td>panna_cotta/1011097</td>
<td>beef_tartare/1009672</td>
<td>greek_salad/1010520</td>
<td>foie_gras/1011711</td>
<td>tacos/1007867</td>
<td>pad_thai/1011059</td>
<td>poutine/1028984</td>
<td>ramen/1004562</td>
<td>pulled_pork_sandwich/1008770</td>
<td>bibimbap/1009730</td>
<td>beignets/1005233</td>
<td>apple_pie/1026328</td>
<td>crab_cakes/1006485</td>
<td>risotto/1014631</td>
<td>paella/1004897</td>
<td>steak/101312</td>
<td>baby_back_ribs/1007272</td>
<td>miso_soup/1043862</td>
<td>frozen_yogurt/1014166</td>
<td>club_sandwich/102978</td>
<td>carrot_cake/1011021</td>
<td>falafel/1016116</td>
<td>bread_pudding/1006034</td>
<td>chicken_wings/1009927</td>
<td>gnocchi/1011446</td>
<td>caprese_salad/1030908</td>
<td>creme_brulee/1008678</td>
<td>escargots/1017301</td>
<td>chocolate_cake/1007412</td>
<td>tiramisu/1015080</td>
<td>spaghetti_bolognese/1005431</td>
<td>mussels/102600</td>
<td>scallops/101158</td>
<td>baklava/1021344</td>
<td>edamame/1018242</td>
<td>macaroni_and_cheese/101810</td>
<td>pancakes/101450</td>
<td>garlic_bread/1030410</td>
<td>beet_salad/1006123</td>
<td>onion_rings/1020126</td>
<td>red_velvet_cake/1041227</td>
<td>grilled_salmon/1019062</td>
<td>chicken_curry/1022681</td>
<td>deviled_eggs/101298</td>
<td>caesar_salad/1011441</td>
<td>hummus/1010716</td>
<td>fish_and_chips/100968</td>
<td>lasagna/1015789</td>
<td>peking_duck/1015952</td>
<td>guacamole/1016594</td>
<td>strawberry_shortcake/1017466</td>
<td>clam_chowder/1019961</td>
<td>croque_madame/1013932</td>
<td>french_onion_soup/1012354</td>
<td>beef_carpaccio/1021977</td>
<td>fried_rice/1015700</td>
<td>donuts/100786</td>
<td>gyoza/1024150</td>
<td>ravioli/1012118</td>
<td>fried_calamari/100736</td>
<td>spaghetti_carbonara/1012273</td>
<td>french_toast/1006538</td>
<td>lobster_bisque/1030246</td>
<td>ceviche/1014769</td>
<td>bruschetta/1033851</td>
<td>french_fries/1009455</td>
<td>shrimp_and_grits/100346</td>
<td>filet_mignon/100639</td>
<td>hamburger/100719</td>
<td>dumplings/100262</td>
<td>tuna_tartare/101595</td>
<td>sushi/1012499</td>
<td>cheese_plate/10057</td>
<td>eggs_benedict/1008725</td>
<td>cup_cakes/1009501</td>
<td>takoyaki/1003289</td>
<td>chocolate_mousse/1026492</td>
<td>breakfast_burrito/1002929</td>
<td>hot_dog/1013916</td>
<td>macarons/1003207</td>
<td>waffles/1005295</td>
<td>seaweed_salad/101671</td>
<td>cannoli/1015289</td>
<td>huevos_rancheros/1005451</td>
<td>pizza/1008844</td>
<td>chicken_quesadilla/1011413</td>
<td>pho/1012513</td>
<td>prime_rib/100945</td>
<td>cheesecake/1004807</td>
<td>ice_cream/102595</td>
<td>omelette/1015300</td>
<td>grilled_cheese_sandwich/1007544</td>
<td>lobster_roll_sandwich/100646</td>
<td>nachos/1011394</td>
<td>oysters/1023832</td>
</tr>
<tr class="even">
<td>3</td>
<td>churros/102100</td>
<td>hot_and_sour_soup/1008701</td>
<td>samosa/1015943</td>
<td>sashimi/1007253</td>
<td>pork_chop/1019569</td>
<td>spring_rolls/1008736</td>
<td>panna_cotta/1013000</td>
<td>beef_tartare/1012128</td>
<td>greek_salad/1011665</td>
<td>foie_gras/1017233</td>
<td>tacos/1015285</td>
<td>pad_thai/1011238</td>
<td>poutine/102911</td>
<td>ramen/101297</td>
<td>pulled_pork_sandwich/1037387</td>
<td>bibimbap/1011217</td>
<td>beignets/1011780</td>
<td>apple_pie/1028787</td>
<td>crab_cakes/1013559</td>
<td>risotto/1017141</td>
<td>paella/1018124</td>
<td>steak/1021458</td>
<td>baby_back_ribs/1008749</td>
<td>miso_soup/1046478</td>
<td>frozen_yogurt/1017177</td>
<td>club_sandwich/102996</td>
<td>carrot_cake/1024932</td>
<td>falafel/102463</td>
<td>bread_pudding/100939</td>
<td>chicken_wings/101104</td>
<td>gnocchi/1029180</td>
<td>caprese_salad/103421</td>
<td>creme_brulee/1010919</td>
<td>escargots/1019707</td>
<td>chocolate_cake/1009391</td>
<td>tiramisu/1023537</td>
<td>spaghetti_bolognese/1016511</td>
<td>mussels/1026090</td>
<td>scallops/1012281</td>
<td>baklava/1024334</td>
<td>edamame/102048</td>
<td>macaroni_and_cheese/1018941</td>
<td>pancakes/1014974</td>
<td>garlic_bread/1031308</td>
<td>beet_salad/1011225</td>
<td>onion_rings/102531</td>
<td>red_velvet_cake/1043495</td>
<td>grilled_salmon/1026062</td>
<td>chicken_curry/1027623</td>
<td>deviled_eggs/1025242</td>
<td>caesar_salad/1013504</td>
<td>hummus/1014424</td>
<td>fish_and_chips/1010511</td>
<td>lasagna/1019253</td>
<td>peking_duck/101675</td>
<td>guacamole/1017481</td>
<td>strawberry_shortcake/1022070</td>
<td>clam_chowder/1020283</td>
<td>croque_madame/1015306</td>
<td>french_onion_soup/1020156</td>
<td>beef_carpaccio/102840</td>
<td>fried_rice/1019981</td>
<td>donuts/1008454</td>
<td>gyoza/103201</td>
<td>ravioli/1014283</td>
<td>fried_calamari/1018068</td>
<td>spaghetti_carbonara/1012528</td>
<td>french_toast/1025962</td>
<td>lobster_bisque/1030273</td>
<td>ceviche/1015455</td>
<td>bruschetta/1034274</td>
<td>french_fries/1020588</td>
<td>shrimp_and_grits/1006712</td>
<td>filet_mignon/1007877</td>
<td>hamburger/1007277</td>
<td>dumplings/1002996</td>
<td>tuna_tartare/1016519</td>
<td>sushi/1013418</td>
<td>cheese_plate/1008229</td>
<td>eggs_benedict/1010197</td>
<td>cup_cakes/1010744</td>
<td>takoyaki/1012802</td>
<td>chocolate_mousse/1027823</td>
<td>breakfast_burrito/1006144</td>
<td>hot_dog/101571</td>
<td>macarons/1003224</td>
<td>waffles/1011635</td>
<td>seaweed_salad/1019344</td>
<td>cannoli/1019714</td>
<td>huevos_rancheros/1008025</td>
<td>pizza/1008941</td>
<td>chicken_quesadilla/1023828</td>
<td>pho/1019401</td>
<td>prime_rib/10120</td>
<td>cheesecake/1017408</td>
<td>ice_cream/1044117</td>
<td>omelette/1029915</td>
<td>grilled_cheese_sandwich/1013343</td>
<td>lobster_roll_sandwich/100655</td>
<td>nachos/1013641</td>
<td>oysters/103236</td>
</tr>
<tr class="odd">
<td>4</td>
<td>churros/1025494</td>
<td>hot_and_sour_soup/1008924</td>
<td>samosa/1016296</td>
<td>sashimi/1010510</td>
<td>pork_chop/1025391</td>
<td>spring_rolls/1012525</td>
<td>panna_cotta/1020036</td>
<td>beef_tartare/1027680</td>
<td>greek_salad/1012989</td>
<td>foie_gras/1023512</td>
<td>tacos/1023154</td>
<td>pad_thai/1013966</td>
<td>poutine/1036670</td>
<td>ramen/1014141</td>
<td>pulled_pork_sandwich/1040750</td>
<td>bibimbap/1014434</td>
<td>beignets/1019643</td>
<td>apple_pie/1043283</td>
<td>crab_cakes/1026455</td>
<td>risotto/1018227</td>
<td>paella/1028277</td>
<td>steak/1032846</td>
<td>baby_back_ribs/1009028</td>
<td>miso_soup/1050730</td>
<td>frozen_yogurt/1017511</td>
<td>club_sandwich/1040746</td>
<td>carrot_cake/1038934</td>
<td>falafel/1033721</td>
<td>bread_pudding/1018769</td>
<td>chicken_wings/1012615</td>
<td>gnocchi/1034178</td>
<td>caprese_salad/103452</td>
<td>creme_brulee/1015138</td>
<td>escargots/1020134</td>
<td>chocolate_cake/1012239</td>
<td>tiramisu/1026043</td>
<td>spaghetti_bolognese/102916</td>
<td>mussels/1032420</td>
<td>scallops/1025170</td>
<td>baklava/1031470</td>
<td>edamame/1021273</td>
<td>macaroni_and_cheese/1024001</td>
<td>pancakes/101644</td>
<td>garlic_bread/1038093</td>
<td>beet_salad/1015901</td>
<td>onion_rings/1037898</td>
<td>red_velvet_cake/104733</td>
<td>grilled_salmon/1053214</td>
<td>chicken_curry/102896</td>
<td>deviled_eggs/102827</td>
<td>caesar_salad/1019118</td>
<td>hummus/1014861</td>
<td>fish_and_chips/1012859</td>
<td>lasagna/1028961</td>
<td>peking_duck/1019978</td>
<td>guacamole/1023237</td>
<td>strawberry_shortcake/1030449</td>
<td>clam_chowder/1023442</td>
<td>croque_madame/1016269</td>
<td>french_onion_soup/1020179</td>
<td>beef_carpaccio/1028573</td>
<td>fried_rice/1021229</td>
<td>donuts/101905</td>
<td>gyoza/1036466</td>
<td>ravioli/1019632</td>
<td>fried_calamari/1021250</td>
<td>spaghetti_carbonara/1014928</td>
<td>french_toast/102612</td>
<td>lobster_bisque/1033811</td>
<td>ceviche/1027751</td>
<td>bruschetta/1034665</td>
<td>french_fries/1026314</td>
<td>shrimp_and_grits/1011064</td>
<td>filet_mignon/1015486</td>
<td>hamburger/100930</td>
<td>dumplings/100410</td>
<td>tuna_tartare/1052688</td>
<td>sushi/1018953</td>
<td>cheese_plate/1008347</td>
<td>eggs_benedict/1018581</td>
<td>cup_cakes/1027241</td>
<td>takoyaki/1016334</td>
<td>chocolate_mousse/1034251</td>
<td>breakfast_burrito/1010145</td>
<td>hot_dog/1017226</td>
<td>macarons/1004903</td>
<td>waffles/1013333</td>
<td>seaweed_salad/1019648</td>
<td>cannoli/1021048</td>
<td>huevos_rancheros/1014671</td>
<td>pizza/1011404</td>
<td>chicken_quesadilla/1024740</td>
<td>pho/1021371</td>
<td>prime_rib/1016126</td>
<td>cheesecake/1021942</td>
<td>ice_cream/104465</td>
<td>omelette/1038109</td>
<td>grilled_cheese_sandwich/1016030</td>
<td>lobster_roll_sandwich/100702</td>
<td>nachos/1014846</td>
<td>oysters/1038150</td>
</tr>
</tbody>
</table>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">df_train_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/food-101/train.txt'</span>)</span>
<span id="cb7-2">df_train_txt.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table class="table">
<thead>
<tr class="header">
<th></th>
<th>apple_pie/1005649</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>apple_pie/1014775</td>
</tr>
<tr class="even">
<td>1</td>
<td>apple_pie/1026328</td>
</tr>
<tr class="odd">
<td>2</td>
<td>apple_pie/1028787</td>
</tr>
<tr class="even">
<td>3</td>
<td>apple_pie/1043283</td>
</tr>
<tr class="odd">
<td>4</td>
<td>apple_pie/1050519</td>
</tr>
<tr class="even">
<td>5</td>
<td>apple_pie/1057749</td>
</tr>
<tr class="odd">
<td>6</td>
<td>apple_pie/1057810</td>
</tr>
<tr class="even">
<td>7</td>
<td>apple_pie/1072416</td>
</tr>
<tr class="odd">
<td>8</td>
<td>apple_pie/1074856</td>
</tr>
<tr class="even">
<td>9</td>
<td>apple_pie/1074942</td>
</tr>
</tbody>
</table>
</div>
<p>We can see that .txt file is of no use</p>
<section id="lets-view-5-random-food-items" class="level3">
<h3 class="anchored" data-anchor-id="lets-view-5-random-food-items">Let’s view 5 random food items</h3>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># actual path to train image folder</span></span>
<span id="cb8-5">train_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/food-101/images'</span></span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to get a list of all image paths in the specified folder</span></span>
<span id="cb8-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_image_paths(folder):</span>
<span id="cb8-9">    image_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> root, dirs, files <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.walk(folder):</span>
<span id="cb8-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> files:</span>
<span id="cb8-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.lower().endswith((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.png'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.jpg'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.jpeg'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.gif'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.bmp'</span>)):</span>
<span id="cb8-13">                image_paths.append(os.path.join(root, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>))</span>
<span id="cb8-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image_paths</span>
<span id="cb8-15"></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to randomly select and display 5 larger images</span></span>
<span id="cb8-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show_random_images(image_paths, num_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, display_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)):</span>
<span id="cb8-18">    selected_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.sample(image_paths, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(num_images, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(image_paths)))</span>
<span id="cb8-19"></span>
<span id="cb8-20">    fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_images, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>display_size)</span>
<span id="cb8-21"></span>
<span id="cb8-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ax, image_path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(axes, selected_images):</span>
<span id="cb8-23">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(image_path)</span>
<span id="cb8-24">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img.resize((display_size[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, display_size[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Increase size</span></span>
<span id="cb8-25">        ax.imshow(img)</span>
<span id="cb8-26">        ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb8-27"></span>
<span id="cb8-28">    plt.show()</span>
<span id="cb8-29"></span>
<span id="cb8-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of all image paths in the specified folder</span></span>
<span id="cb8-31">all_image_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_paths(train_path)</span>
<span id="cb8-32"></span>
<span id="cb8-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show 5 random larger images</span></span>
<span id="cb8-34">show_random_images(all_image_paths, num_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, display_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>))</span></code></pre></div>
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect6_Part1/lecture-6-road-to-the-top-part-1-self_files/lecture-6-road-to-the-top-part-1-self_12_0.png" class="img-fluid"></p>
</section>
<section id="remove-images-that-are-corrupt" class="level3">
<h3 class="anchored" data-anchor-id="remove-images-that-are-corrupt">Remove images that are corrupt</h3>
<p><code>verify_images()</code> will return the paths of images that are corrupt, and we can use <code>unlink</code> to remove these files.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">fns_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(train_path)</span>
<span id="cb9-2">fns_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(test_path)</span>
<span id="cb9-3"></span>
<span id="cb9-4"></span>
<span id="cb9-5">total_train_imagelength <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(fns_train)</span>
<span id="cb9-6">total_test_imagelength <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(fns_test)</span>
<span id="cb9-7"></span>
<span id="cb9-8">failed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verify_images(fns_train)</span>
<span id="cb9-9">failed_imagelength <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(failed)</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove images that are corrupt</span></span>
<span id="cb9-12">failed.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(Path.unlink)</span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The images are in train_images, so let's grab a list of all of them:</span></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># trn_path = path/'train'</span></span>
<span id="cb9-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># files = get_image_files(trn_path)</span></span>
<span id="cb9-17"></span>
<span id="cb9-18">Image_Count_Dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total_Train_Image_Count"</span>: total_train_imagelength, </span>
<span id="cb9-19">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed_Train_Image_Count"</span>: failed_imagelength,</span>
<span id="cb9-20">                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total_Test_Image_Count"</span>: total_test_imagelength}</span>
<span id="cb9-21">Image_Count_Dict</span></code></pre></div>
<pre><code>{'Total_Train_Image_Count': 85850,
 'Failed_Train_Image_Count': 0,
 'Total_Test_Image_Count': 15150}</code></pre>
</section>
<section id="standardize-the-size-of-images" class="level3">
<h3 class="anchored" data-anchor-id="standardize-the-size-of-images">Standardize the size of Images</h3>
<p>Let’s check all their sizes. This is faster if we do it in <code>parallel</code>, it helps in executing function in parallel.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.parallel <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> f(o): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> PILImage.create(o).size</span>
<span id="cb11-4">sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parallel(f, fns_train, n_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb11-5">pd.Series(sizes).value_counts()</span></code></pre></div>
<pre><code>(512, 512)    52962
(512, 384)    12531
(384, 512)     5522
(382, 512)     2431
(512, 382)     2118
              ...  
(489, 512)        1
(469, 512)        1
(405, 512)        1
(407, 512)        1
(279, 512)        1
Name: count, Length: 453, dtype: int64</code></pre>
<p>We can see that we have lots of images with different sizes. We need to standardize it.</p>
</section>
</section>
<section id="data-loader" class="level2">
<h2 class="anchored" data-anchor-id="data-loader">2. Data Loader</h2>
<p>Our images are of size of 512(multiple of 32) , let’s resize it to 480( multiple of 32) .</p>
<ul>
<li><strong>Tip</strong> If an image is in a rectangular format such as (640,480) with an aspect ratio (4:3), maintain the same aspect ratio when resizing the images. For example, resize it to (256,192). Additionally, if possible set new size to be multiple of <strong>32</strong>. CNN works great with 32* size.</li>
</ul>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataLoaders.from_folder(train_path, valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>,</span>
<span id="cb13-2">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'squish'</span>),</span>
<span id="cb13-3">    batch_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>))</span>
<span id="cb13-4"></span>
<span id="cb13-5">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect6_Part1/lecture-6-road-to-the-top-part-1-self_files/lecture-6-road-to-the-top-part-1-self_20_0.png" class="img-fluid"></p>
<p>Referring <a href="https://www.kaggle.com/code/jhoward/the-best-vision-models-for-fine-tuning">Best Vision models for fine-tuning</a> we can make a case that <code>resnet26d</code> is the fastest resolution-independent model, which make it into the top-15 lists there</p>
<ul>
<li><strong>Goal</strong> is not to achieve the best possible results, but rather to get things going with simple models &amp; then improve upon them.</li>
</ul>
</section>
<section id="model-building" class="level2">
<h2 class="anchored" data-anchor-id="model-building">3. Model Building</h2>
<p><strong>Half-precision floating-point [.to_fp16()]</strong> uses 16 bits to store a number, while single precision (float32) uses 32 bits and double precision (float64) uses 64 bits. It is useful in deep learning for its reduced memory usage.</p>
<p>Furthermore, it is great tool to be utilized during the <em>inference phase to save memory and computational resources</em>.</p>
<section id="with-floating-point" class="level3">
<h3 class="anchored" data-anchor-id="with-floating-point">With floating point</h3>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">learn_with_fp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resnet26d'</span>, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate, path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>).to_fp16()</span>
<span id="cb14-2">learn_with_fp.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<table class="table">
<thead>
<tr class="header">
<th>epoch</th>
<th>train_loss</th>
<th>valid_loss</th>
<th>error_rate</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>2.790304</td>
<td>2.355953</td>
<td>0.580431</td>
<td>06:11</td>
</tr>
</tbody>
</table>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<table class="table">
<thead>
<tr class="header">
<th>epoch</th>
<th>train_loss</th>
<th>valid_loss</th>
<th>error_rate</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>2.105901</td>
<td>1.847007</td>
<td>0.469715</td>
<td>06:12</td>
</tr>
<tr class="even">
<td>1</td>
<td>1.867976</td>
<td>1.591036</td>
<td>0.411415</td>
<td>06:14</td>
</tr>
<tr class="odd">
<td>2</td>
<td>1.614650</td>
<td>1.446619</td>
<td>0.375655</td>
<td>06:16</td>
</tr>
<tr class="even">
<td>3</td>
<td>1.456076</td>
<td>1.420436</td>
<td>0.368957</td>
<td>06:15</td>
</tr>
</tbody>
</table>
</section>
<section id="without-floating-point" class="level3">
<h3 class="anchored" data-anchor-id="without-floating-point">Without floating point</h3>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">learn_without_fp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resnet26d'</span>, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate, path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)</span>
<span id="cb15-2">learn_without_fp.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<pre><code>model.safetensors:   0%|          | 0.00/64.2M [00:00&lt;?, ?B/s]</code></pre>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<table class="table">
<thead>
<tr class="header">
<th>epoch</th>
<th>train_loss</th>
<th>valid_loss</th>
<th>error_rate</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>2.788730</td>
<td>2.332079</td>
<td>0.579849</td>
<td>06:15</td>
</tr>
</tbody>
</table>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<table class="table">
<thead>
<tr class="header">
<th>epoch</th>
<th>train_loss</th>
<th>valid_loss</th>
<th>error_rate</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>2.188421</td>
<td>1.854993</td>
<td>0.471870</td>
<td>06:26</td>
</tr>
<tr class="even">
<td>1</td>
<td>1.821760</td>
<td>1.596297</td>
<td>0.414735</td>
<td>06:32</td>
</tr>
<tr class="odd">
<td>2</td>
<td>1.586775</td>
<td>1.457398</td>
<td>0.379907</td>
<td>06:45</td>
</tr>
<tr class="even">
<td>3</td>
<td>1.483222</td>
<td>1.437040</td>
<td>0.376878</td>
<td>06:35</td>
</tr>
</tbody>
</table>
<ul>
<li><p>Comparing both, we can observe that floating point arithmetic didn’t prove as handy as it should have been, accuracy and time remain the same.</p></li>
<li><p>Additionally, let’s recall our first task on classification of Big Cats with very little data, we achieved significantly higher accuracy. However, despite the abundance of images (85,850) in this case, we still encounter significant inaccuracies. This discrepancy suggests that the model is encountering learning challenges, possibly due to issues with the training data or the images being too similar. For instance, there may be minimal variation in certain dishes despite being categorized differently, such as <code>Veg Pulao &amp; Briyani.</code></p></li>
</ul>
</section>
<section id="learning-rate" class="level3">
<h3 class="anchored" data-anchor-id="learning-rate">Learning Rate</h3>
<p><a href="https://forums.fast.ai/t/new-lr-finder-output/89236/3">Learning Rate blog</a></p>
<p>As discussed earlier, Valley &amp; Slide yield the best results. So, we don’t need to call the other two functions. Our default value for learning rate is <strong>0.02.</strong></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">learn_without_fp.lr_find(suggest_funcs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(valley, slide))</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<pre><code>SuggestedLRs(valley=1.2022644114040304e-05, slide=0.019054606556892395)</code></pre>
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect6_Part1/lecture-6-road-to-the-top-part-1-self_files/lecture-6-road-to-the-top-part-1-self_30_3.png" class="img-fluid"></p>
<p>So it was the learning rate that caused such a high error rate as we can see in our plot. Let’s reduce it near to <code>valley</code> point.</p>
</section>
<section id="final-model" class="level3">
<h3 class="anchored" data-anchor-id="final-model">Final Model</h3>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">learn_without_fp.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0002</span>)</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<table class="table">
<thead>
<tr class="header">
<th>epoch</th>
<th>train_loss</th>
<th>valid_loss</th>
<th>error_rate</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.489364</td>
<td>1.298432</td>
<td>0.340885</td>
<td>06:29</td>
</tr>
<tr class="even">
<td>1</td>
<td>1.253947</td>
<td>1.154729</td>
<td>0.307047</td>
<td>06:29</td>
</tr>
<tr class="odd">
<td>2</td>
<td>1.164939</td>
<td>1.070023</td>
<td>0.283518</td>
<td>06:33</td>
</tr>
<tr class="even">
<td>3</td>
<td>1.037511</td>
<td>1.050543</td>
<td>0.275713</td>
<td>06:34</td>
</tr>
</tbody>
</table>
</section>
<section id="lets-export-the-model" class="level3">
<h3 class="anchored" data-anchor-id="lets-export-the-model">Let’s Export the model</h3>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">learn_without_fp.export(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lecture6_Part1_Food_Resnet_Model.pkl'</span>)</span></code></pre></div>
</section>
</section>
<section id="run-of-test-data" class="level2">
<h2 class="anchored" data-anchor-id="run-of-test-data">4. Run of Test Data</h2>
<section id="read-test-data" class="level3">
<h3 class="anchored" data-anchor-id="read-test-data">Read test data</h3>
<p>Now, we can obtain the probabilities of each class and the index of the most likely class from this test set. The second object returned by <strong>get_preds</strong> contains the targets, which are blank for a test set, so we discard them.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">test_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(test_path).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>()</span>
<span id="cb21-2">test_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dls.test_dl(test_files)</span>
<span id="cb21-3"></span>
<span id="cb21-4">probs,_,idxs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn_without_fp.get_preds(dl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_dl, with_decoded<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb21-5">idxs</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<pre><code>tensor([54, 80, 44,  ..., 73, 78, 92])</code></pre>
<p>These need to be mapped to the names of each type. These names are automatically stored by FastAI in the <code>vocab</code>.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">dls.vocab</span></code></pre></div>
<pre><code>['apple_pie', 'baby_back_ribs', 'baklava', 'beef_carpaccio', 'beef_tartare', 'beet_salad', 'beignets', 'bibimbap', 'bread_pudding', 'breakfast_burrito', 'bruschetta', 'caesar_salad', 'cannoli', 'caprese_salad', 'carrot_cake', 'ceviche', 'cheese_plate', 'cheesecake', 'chicken_curry', 'chicken_quesadilla', 'chicken_wings', 'chocolate_cake', 'chocolate_mousse', 'churros', 'clam_chowder', 'club_sandwich', 'crab_cakes', 'creme_brulee', 'croque_madame', 'cup_cakes', 'deviled_eggs', 'donuts', 'dumplings', 'edamame', 'eggs_benedict', 'escargots', 'falafel', 'filet_mignon', 'fish_and_chips', 'foie_gras', 'french_fries', 'french_onion_soup', 'french_toast', 'fried_calamari', 'fried_rice', 'frozen_yogurt', 'garlic_bread', 'gnocchi', 'greek_salad', 'grilled_cheese_sandwich', 'grilled_salmon', 'guacamole', 'gyoza', 'hamburger', 'hot_and_sour_soup', 'hot_dog', 'huevos_rancheros', 'hummus', 'ice_cream', 'lasagna', 'lobster_bisque', 'lobster_roll_sandwich', 'macaroni_and_cheese', 'macarons', 'miso_soup', 'mussels', 'nachos', 'omelette', 'onion_rings', 'oysters', 'pad_thai', 'paella', 'pancakes', 'panna_cotta', 'peking_duck', 'pho', 'pizza', 'pork_chop', 'poutine', 'prime_rib', 'pulled_pork_sandwich', 'ramen', 'ravioli', 'red_velvet_cake', 'risotto', 'samosa', 'sashimi', 'scallops', 'seaweed_salad', 'shrimp_and_grits', 'spaghetti_bolognese', 'spaghetti_carbonara', 'spring_rolls', 'steak', 'strawberry_shortcake', 'sushi', 'tacos', 'takoyaki', 'tiramisu', 'tuna_tartare', 'waffles']</code></pre>
</section>
<section id="map-the-number-with-name" class="level3">
<h3 class="anchored" data-anchor-id="map-the-number-with-name">Map the number with name</h3>
<p>Let’s create a mapping using pandas:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">filenames <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [path.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> test_files]</span>
<span id="cb25-2">ss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image_id'</span>: filenames})</span>
<span id="cb25-3">ss</span></code></pre></div>
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table class="table">
<thead>
<tr class="header">
<th></th>
<th>image_id</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1000486.jpg</td>
</tr>
<tr class="even">
<td>1</td>
<td>100057.jpg</td>
</tr>
<tr class="odd">
<td>2</td>
<td>1000605.jpg</td>
</tr>
<tr class="even">
<td>3</td>
<td>100093.jpg</td>
</tr>
<tr class="odd">
<td>4</td>
<td>1001084.jpg</td>
</tr>
<tr class="even">
<td>…</td>
<td>…</td>
</tr>
<tr class="odd">
<td>15145</td>
<td>999449.jpg</td>
</tr>
<tr class="even">
<td>15146</td>
<td>999550.jpg</td>
</tr>
<tr class="odd">
<td>15147</td>
<td>999858.jpg</td>
</tr>
<tr class="even">
<td>15148</td>
<td>999875.jpg</td>
</tr>
<tr class="odd">
<td>15149</td>
<td>999961.jpg</td>
</tr>
</tbody>
</table>
<p>
15150 rows × 1 columns
</p>
</div>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dls.vocab))</span>
<span id="cb26-2">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(idxs.numpy(), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"idxs"</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(mapping)</span>
<span id="cb26-3">results</span></code></pre></div>
<pre><code>0           hot_and_sour_soup
1        pulled_pork_sandwich
2                  fried_rice
3               frozen_yogurt
4              chocolate_cake
                 ...         
15145     macaroni_and_cheese
15146           chicken_curry
15147             panna_cotta
15148                 poutine
15149            spring_rolls
Name: idxs, Length: 15150, dtype: object</code></pre>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">ss[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results</span>
<span id="cb28-2">ss.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/kaggle/working/Lecture6_Part1_Food_Resnet_Submit.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb28-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>head Lecture6_Part1_Food_Resnet_Submit.csv</span></code></pre></div>
<pre><code>image_id,label
1000486.jpg,hot_and_sour_soup
100057.jpg,pulled_pork_sandwich
1000605.jpg,fried_rice
100093.jpg,frozen_yogurt
1001084.jpg,chocolate_cake
1001089.jpg,baby_back_ribs
1001113.jpg,bibimbap
100148.jpg,french_fries
1002334.jpg,baklava</code></pre>


</section>
</section>

 ]]></description>
  <category>Computer Vision</category>
  <category>FastAI</category>
  <guid>https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect6_Part1/index.html</guid>
  <pubDate>Sat, 27 Apr 2024 18:30:00 GMT</pubDate>
</item>
<item>
  <title>FastAI Course Lecture 5 Notes</title>
  <dc:creator>Kanav Sharma</dc:creator>
  <link>https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect5/index.html</link>
  <description><![CDATA[ 




<section id="focusing-on-computer-vision-and-tabular-data" class="level4">
<h4 class="anchored" data-anchor-id="focusing-on-computer-vision-and-tabular-data">Focusing on Computer Vision and Tabular Data</h4>
<p>My primary focus is to write on the lessons and techniques related to building and training models for Computer Vision tasks, such as image classification, object detection, and segmentation. Additionally, I’ll be exploring the methods and best practices for working with Tabular Data for this lecture only.</p>
</section>
<section id="this-chapter-focuses-on-tabular-data" class="level3">
<h3 class="anchored" data-anchor-id="this-chapter-focuses-on-tabular-data">This chapter focuses on Tabular Data</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.tabular.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-2">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span></code></pre></div>
</section>
<section id="read-prepare-the-data" class="level3">
<h3 class="anchored" data-anchor-id="read-prepare-the-data">Read &amp; Prepare the data</h3>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../input/titanic/train.csv'</span>)</span>
<span id="cb2-2">df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table class="table">
<colgroup>
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 7%">
</colgroup>
<thead>
<tr class="header">
<th></th>
<th>PassengerId</th>
<th>Survived</th>
<th>Pclass</th>
<th>Name</th>
<th>Sex</th>
<th>Age</th>
<th>SibSp</th>
<th>Parch</th>
<th>Ticket</th>
<th>Fare</th>
<th>Cabin</th>
<th>Embarked</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1</td>
<td>0</td>
<td>3</td>
<td>Braund, Mr.&nbsp;Owen Harris</td>
<td>male</td>
<td>22.00</td>
<td>1</td>
<td>0</td>
<td>A/5 21171</td>
<td>7.25</td>
<td>NaN</td>
<td>S</td>
</tr>
<tr class="even">
<td>1</td>
<td>2</td>
<td>1</td>
<td>1</td>
<td>Cumings, Mrs.&nbsp;John Bradley (Florence Briggs Thayer)</td>
<td>female</td>
<td>38.00</td>
<td>1</td>
<td>0</td>
<td>PC 17599</td>
<td>71.28</td>
<td>C85</td>
<td>C</td>
</tr>
<tr class="odd">
<td>2</td>
<td>3</td>
<td>1</td>
<td>3</td>
<td>Heikkinen, Miss. Laina</td>
<td>female</td>
<td>26.00</td>
<td>0</td>
<td>0</td>
<td>STON/O2. 3101282</td>
<td>7.92</td>
<td>NaN</td>
<td>S</td>
</tr>
<tr class="even">
<td>3</td>
<td>4</td>
<td>1</td>
<td>1</td>
<td>Futrelle, Mrs.&nbsp;Jacques Heath (Lily May Peel)</td>
<td>female</td>
<td>35.00</td>
<td>1</td>
<td>0</td>
<td>113803</td>
<td>53.10</td>
<td>C123</td>
<td>S</td>
</tr>
<tr class="odd">
<td>4</td>
<td>5</td>
<td>0</td>
<td>3</td>
<td>Allen, Mr.&nbsp;William Henry</td>
<td>male</td>
<td>35.00</td>
<td>0</td>
<td>0</td>
<td>373450</td>
<td>8.05</td>
<td>NaN</td>
<td>S</td>
</tr>
<tr class="even">
<td>5</td>
<td>6</td>
<td>0</td>
<td>3</td>
<td>Moran, Mr.&nbsp;James</td>
<td>male</td>
<td>NaN</td>
<td>0</td>
<td>0</td>
<td>330877</td>
<td>8.46</td>
<td>NaN</td>
<td>Q</td>
</tr>
<tr class="odd">
<td>6</td>
<td>7</td>
<td>0</td>
<td>1</td>
<td>McCarthy, Mr.&nbsp;Timothy J</td>
<td>male</td>
<td>54.00</td>
<td>0</td>
<td>0</td>
<td>17463</td>
<td>51.86</td>
<td>E46</td>
<td>S</td>
</tr>
<tr class="even">
<td>7</td>
<td>8</td>
<td>0</td>
<td>3</td>
<td>Palsson, Master. Gosta Leonard</td>
<td>male</td>
<td>2.00</td>
<td>3</td>
<td>1</td>
<td>349909</td>
<td>21.07</td>
<td>NaN</td>
<td>S</td>
</tr>
<tr class="odd">
<td>8</td>
<td>9</td>
<td>1</td>
<td>3</td>
<td>Johnson, Mrs.&nbsp;Oscar W (Elisabeth Vilhelmina Berg)</td>
<td>female</td>
<td>27.00</td>
<td>0</td>
<td>2</td>
<td>347742</td>
<td>11.13</td>
<td>NaN</td>
<td>S</td>
</tr>
<tr class="even">
<td>9</td>
<td>10</td>
<td>1</td>
<td>2</td>
<td>Nasser, Mrs.&nbsp;Nicholas (Adele Achem)</td>
<td>female</td>
<td>14.00</td>
<td>1</td>
<td>0</td>
<td>237736</td>
<td>30.07</td>
<td>NaN</td>
<td>C</td>
</tr>
</tbody>
</table>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df.Name.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>, expand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>, expand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].unique()</span></code></pre></div>
<pre><code>array(['Mr', 'Mrs', 'Miss', 'Master', 'Don', 'Rev', 'Dr', 'Mme', 'Ms',
       'Major', 'Lady', 'Sir', 'Mlle', 'Col', 'Capt', 'the Countess',
       'Jonkheer'], dtype=object)</code></pre>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add_features(df):</span>
<span id="cb5-2">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LogFare'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log1p(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fare'</span>])</span>
<span id="cb5-3">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Deck'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.Cabin.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ABC"</span>, B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ABC"</span>, C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ABC"</span>, D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DE"</span>, E<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DE"</span>, F<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FG"</span>, G<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FG"</span>))</span>
<span id="cb5-4">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Family'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.SibSp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>df.Parch</span>
<span id="cb5-5">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Alone'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.Family<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-6">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TicketFreq'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ticket'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ticket'</span>].transform(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>)</span>
<span id="cb5-7">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Title'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.Name.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>, expand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>, expand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-8">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Title'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.Title.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(Mr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mr"</span>,Miss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Miss"</span>,Mrs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mrs"</span>,Master<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Master"</span>))</span>
<span id="cb5-9"></span>
<span id="cb5-10">add_features(df)</span></code></pre></div>
<ul>
<li><strong>df[‘LogFare’] = np.log1p(df[‘Fare’])</strong> It will create a column LogFare with Log() value of Fare column</li>
<li><strong>df[‘Deck’] = df.Cabin.str[0].map(dict(A=“ABC”, B=“ABC”, C=“ABC”, D=“DE”, E=“DE”, F=“FG”, G=“FG”))</strong> It will create a new ‘Deck’ column based on the first letter of the ‘Cabin’ column. The mapping is done to categorize cabins into groups (ABC, DE, FG).</li>
<li><strong>df[‘Family’] = df.SibSp+df.Parch</strong> It will create a new column ‘Family’ which is the sum of the ‘SibSp’ (number of siblings/spouses) and ‘Parch’ (number of parents/children) columns.</li>
<li><strong>df[‘Alone’] = df.Family == 0</strong> It will create a column ‘Alone’ for those who don’t have family.</li>
<li><strong>df[‘TicketFreq’] = df.groupby(‘Ticket’)[‘Ticket’].transform(‘count’)</strong> Adds a ‘TicketFreq’ column, representing the frequency of each ticket in the dataset.</li>
<li><strong>df[‘Title’] = df.Name.str.split(‘,’, expand=True)[1].str.split(‘.’, expand=True)[0]</strong> Extracts the title from the ‘Name’ column (e.g., Mr, Miss, Mrs) and assigns it to a new ‘Title’ column.</li>
<li><strong>df[‘Title’] = df.Title.map(dict(Mr=“Mr”,Miss=“Miss”,Mrs=“Mrs”,Master=“Master”))</strong> Will take into account only these 3 titles anything else will be labelled as “NAN”.</li>
</ul>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#we can use RandomSplitter to separate out the training and validation sets:</span></span>
<span id="cb6-2">    </span>
<span id="cb6-3">splits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomSplitter(seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)(df)</span></code></pre></div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TabularPandas(</span>
<span id="cb7-2">    df, splits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>splits,</span>
<span id="cb7-3">    procs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Categorify, FillMissing, Normalize],</span>
<span id="cb7-4">    cat_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sex"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pclass"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Embarked"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Deck"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>],</span>
<span id="cb7-5">    cont_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SibSp'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Parch'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LogFare'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Alone'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TicketFreq'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Family'</span>],</span>
<span id="cb7-6">    y_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Survived"</span>, y_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CategoryBlock(),</span>
<span id="cb7-7">).dataloaders(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)</span></code></pre></div>
<pre><code>/opt/conda/lib/python3.10/site-packages/fastai/tabular/core.py:312: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.
  to[n].fillna(self.na_dict[n], inplace=True)</code></pre>
<p><a href="https://docs.fast.ai/tabular.core.html#tabularpandas" class="uri">Tabular Pandas</a></p>
<ul>
<li><p><strong>splits=splits</strong> Use splits for indices of training and validation sets</p></li>
<li><p><strong>procs = [Categorify, FillMissing, Normalize]</strong> Turn strings into categories, fill missing values in numeric columns with the median, normalise all numeric columns</p></li>
<li><p><strong>cat_names</strong> will have all categorical columns</p></li>
<li><p><strong>cont_names</strong> will have all continuous columns</p></li>
<li><p><strong>y_names</strong> will have dependent variable</p></li>
<li><p><strong>y_block()</strong> The dependent variable is categorical (so build a classification model, not a regression model) possible values RegressionBlock(), CategoryBlock(),MultiCategoryBlock()</p></li>
</ul>
</section>
<section id="train-the-model" class="level3">
<h3 class="anchored" data-anchor-id="train-the-model">Train the model</h3>
<p>Call dataloader(dls) in tabular_learner &amp; set size of hidden layer = [15,19] defualt is [200,100] layers parameter defines number of neurons in particular neural network.</p>
<p>Architecure of Shallow Neural network: 1. Input Layer 2. First Hidden Layer (15 in our case) 3. Second Hidden Layer (19 in our case) 4. Output Layer</p>
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect5/Lecture_5_Tabular_Data_Self_files/NN.PNG" class="img-fluid"></p>
<p><a href="https://www.researchgate.net/figure/General-Architecture-for-a-Deep-Neural-Network-with-Two-Hidden-Layers_fig2_353032163">Source</a></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tabular_learner(dls, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>accuracy, layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>])</span></code></pre></div>
</section>
<section id="learning-rate" class="level3">
<h3 class="anchored" data-anchor-id="learning-rate">Learning Rate</h3>
<p><a href="https://forums.fast.ai/t/new-lr-finder-output/89236/3">New Lr Finder Output</a></p>
<p><em>lr_min, lr_steep, lr_valley, lr_slide = learn.lr_find(suggest_funcs=(minimum, steep, valley, slide))</em></p>
<p><strong>Lr_find(suggest_func= (slide, valley))</strong> is great way to find learning rate for any model. There are multiple ways of do this, and in this case, we are using slide&amp; valley methods. By picking one value among these two values we will get pretty good learning rate value</p>
<p>Generally it is established that: Valley &gt; Slide &gt; Steep &gt; Minimum. Hence by defualt we use valley &amp; slide to get best of both.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">learn.lr_find(suggest_funcs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(slide, valley))</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<pre><code>SuggestedLRs(slide=0.05754399299621582, valley=0.009120108559727669)</code></pre>
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect5/Lecture_5_Tabular_Data_Self_files/Lecture_5_Tabular_Data_Self_16_3.png" class="img-fluid"></p>
<p>The two colored points are both reasonable choices for a learning rate. I’ll pick somewhere between the two (0.04) and train for a few epochs:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">learn.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.04</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 20 will define no of epoch</span></span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<table class="table">
<thead>
<tr class="header">
<th>epoch</th>
<th>train_loss</th>
<th>valid_loss</th>
<th>accuracy</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.594998</td>
<td>0.572238</td>
<td>0.679775</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.515863</td>
<td>0.466670</td>
<td>0.803371</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.476732</td>
<td>0.433698</td>
<td>0.825843</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.446953</td>
<td>0.415818</td>
<td>0.848315</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.434874</td>
<td>0.434143</td>
<td>0.831461</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>5</td>
<td>0.421784</td>
<td>0.410992</td>
<td>0.820225</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>6</td>
<td>0.412457</td>
<td>0.430165</td>
<td>0.831461</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>7</td>
<td>0.407657</td>
<td>0.404660</td>
<td>0.820225</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>8</td>
<td>0.403021</td>
<td>0.412289</td>
<td>0.825843</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>9</td>
<td>0.397732</td>
<td>0.416126</td>
<td>0.837079</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>10</td>
<td>0.394886</td>
<td>0.422662</td>
<td>0.842697</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>11</td>
<td>0.393001</td>
<td>0.441775</td>
<td>0.814607</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>12</td>
<td>0.391272</td>
<td>0.431170</td>
<td>0.842697</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>13</td>
<td>0.388350</td>
<td>0.409692</td>
<td>0.831461</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>14</td>
<td>0.382384</td>
<td>0.416130</td>
<td>0.837079</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>15</td>
<td>0.379093</td>
<td>0.426817</td>
<td>0.820225</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>16</td>
<td>0.374646</td>
<td>0.428383</td>
<td>0.820225</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>17</td>
<td>0.375685</td>
<td>0.453301</td>
<td>0.808989</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>18</td>
<td>0.376625</td>
<td>0.411430</td>
<td>0.820225</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>19</td>
<td>0.374332</td>
<td>0.463273</td>
<td>0.825843</td>
<td>00:00</td>
</tr>
</tbody>
</table>
</section>
<section id="submit-to-kaggle" class="level3">
<h3 class="anchored" data-anchor-id="submit-to-kaggle">Submit to Kaggle</h3>
<p>To submit to Kaggle, we’ll need to read in the test set, and do the same feature engineering we did for the training set:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">tst_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../input/titanic/test.csv'</span>)</span>
<span id="cb13-2">tst_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fare'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tst_df.Fare.fillna(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb13-3">add_features(tst_df)</span></code></pre></div>
<p>We don’t have to worry about pre-processing in our test dataset , we can call <strong>test_dl()</strong>, but we have to take care of NA value in target column if it didn’t existed in training because NA in target column wasn’t pre-processed so our function <strong>test_dl()</strong> do not have it’s recollection.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">tst_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.dls.test_dl(tst_df)</span></code></pre></div>
<pre><code>/opt/conda/lib/python3.10/site-packages/fastai/tabular/core.py:312: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.

to[n].fillna(self.na_dict[n], inplace=True)</code></pre>
<p>Now we can use <strong>get_preds</strong> to get the predictions for the test set:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">preds,_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.get_preds(dl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tst_dl)</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<p>Let’s get our predictions</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">tst_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Survived'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (preds[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>()</span>
<span id="cb17-2">sub_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tst_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PassengerId'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Survived'</span>]]</span>
<span id="cb17-3">sub_df</span></code></pre></div>
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect5/Lecture_5_Tabular_Data_Self_files/Output.PNG" class="img-fluid"></p>
</section>
<section id="ensembling" class="level3">
<h3 class="anchored" data-anchor-id="ensembling">Ensembling</h3>
<p>We can create five separate models, each trained from different random starting points, and average them. This is the simplest approach of ensemble model</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ensemble():</span>
<span id="cb18-2">    learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tabular_learner(dls, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>accuracy, layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>])</span>
<span id="cb18-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> learn.no_bar(),learn.no_logging(): learn.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb18-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> learn.get_preds(dl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tst_dl)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<p>Now we run this five times, and collect the results into a list:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">learns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ensemble() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)]</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<p>We stack this predictions together and take their average predictions:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">ens_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(learns).mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<p>Finally, use the same code as before to generate a submission file, which we can submit to Kaggle after the notebook is saved and run:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">tst_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Survived'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (ens_preds[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.55</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>()</span>
<span id="cb21-2">sub_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tst_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PassengerId'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Survived'</span>]]</span>
<span id="cb21-3">sub_df</span></code></pre></div>
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect5/Lecture_5_Tabular_Data_Self_files/Submit.PNG" class="img-fluid"></p>


</section>

 ]]></description>
  <category>Tabular Data</category>
  <category>FastAI</category>
  <guid>https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect5/index.html</guid>
  <pubDate>Sat, 20 Apr 2024 18:30:00 GMT</pubDate>
</item>
<item>
  <title>FastAI Course Lecture 3 Notes</title>
  <dc:creator>Kanav Sharma</dc:creator>
  <link>https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect3/index.html</link>
  <description><![CDATA[ 




<section id="this-code-aims-to-upscale-our-last-lession." class="level1">
<h1>This code aims to upscale our last lession.</h1>
<p>Previously, we obtained our data from the DuckDuckGo API and built our model around that.</p>
<p>This time, we will retrieve data from a Kaggle dataset, enhance our model, improve our understanding of different available pre-trained vision architectures in PyTorch using the <code>timm</code> library, and implement another model according to our requirements.</p>
<section id="level-1-repeat-last-lesson" class="level2">
<h2 class="anchored" data-anchor-id="level-1-repeat-last-lesson">Level 1 : Repeat last lesson</h2>
<section id="download-dataset-from-kaggle" class="level3">
<h3 class="anchored" data-anchor-id="download-dataset-from-kaggle">1.1 : Download dataset from Kaggle</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> google.colab <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> files</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Upload the Kaggle API key JSON file</span></span>
<span id="cb1-4">uploaded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> files.upload()</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install kaggle</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>mkdir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~/</span>.kaggle</span>
<span id="cb1-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>mv kaggle.json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~/</span>.kaggle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span></span>
<span id="cb1-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>chmod <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~/</span>.kaggle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>kaggle.json</span></code></pre></div>
<pre><code>Saving kaggle.json to kaggle.json
Requirement already satisfied: kaggle in /usr/local/lib/python3.10/dist-packages (1.5.16)
Requirement already satisfied: six&gt;=1.10 in /usr/local/lib/python3.10/dist-packages (from kaggle) (1.16.0)
Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from kaggle) (2024.2.2)
Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.8.2)
Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.31.0)
Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from kaggle) (4.66.2)
Requirement already satisfied: python-slugify in /usr/local/lib/python3.10/dist-packages (from kaggle) (8.0.4)
Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.0.7)
Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from kaggle) (6.1.0)
Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach-&gt;kaggle) (0.5.1)
Requirement already satisfied: text-unidecode&gt;=1.3 in /usr/local/lib/python3.10/dist-packages (from python-slugify-&gt;kaggle) (1.3)
Requirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;kaggle) (3.3.2)
Requirement already satisfied: idna&lt;4,&gt;=2.5 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;kaggle) (3.6)</code></pre>
<section id="download-dataset" class="level4">
<h4 class="anchored" data-anchor-id="download-dataset">Download dataset :</h4>
<p>Open dataset in Kaggle, click on 3 vertical dots (ellipsis) then click on Copy API comamnd, and we are good to go.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>kaggle datasets download <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>d gpiosenka<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>cats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>the<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>wild<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>classification</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a folder called "Big Cat"</span></span>
<span id="cb3-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>mkdir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>p Big_Cat</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unzip the dataset into the "Big Cat" folder</span></span>
<span id="cb3-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>unzip cats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>the<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>wild<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>classification.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>d Big_Cat</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the zip file</span></span>
<span id="cb3-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>rm cats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>the<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>wild<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>classification.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span></span></code></pre></div>
<pre><code>Downloading cats-in-the-wild-image-classification.zip to /content
 96% 118M/123M [00:01&lt;00:00, 57.4MB/s]
100% 123M/123M [00:01&lt;00:00, 65.0MB/s]
Archive:  cats-in-the-wild-image-classification.zip
  inflating: Big_Cat/EfficientNetB0-10-(224 X 224)-100.00.h5  
  inflating: Big_Cat/MobileNetV3 small-10-(224 X 224)-95.96.h5  
  inflating: Big_Cat/WILDCATS.CSV    
  inflating: Big_Cat/test/AFRICAN LEOPARD/1.jpg  
  inflating: Big_Cat/test/AFRICAN LEOPARD/5.jpg  
  inflating: Big_Cat/test/CARACAL/1.jpg  
  inflating: Big_Cat/test/CARACAL/5.jpg  
  inflating: Big_Cat/test/CHEETAH/1.jpg  
  inflating: Big_Cat/test/CHEETAH/5.jpg  
  inflating: Big_Cat/test/CLOUDED LEOPARD/1.jpg  
  inflating: Big_Cat/test/CLOUDED LEOPARD/5.jpg  
  inflating: Big_Cat/test/JAGUAR/1.jpg  
  inflating: Big_Cat/test/JAGUAR/5.jpg  
  inflating: Big_Cat/test/LIONS/1.jpg  
  inflating: Big_Cat/test/LIONS/5.jpg  
  inflating: Big_Cat/test/OCELOT/1.jpg  
  inflating: Big_Cat/test/OCELOT/5.jpg  
  inflating: Big_Cat/test/PUMA/1.jpg  
  inflating: Big_Cat/test/PUMA/5.jpg  
  inflating: Big_Cat/test/SNOW LEOPARD/1.jpg  
  inflating: Big_Cat/test/SNOW LEOPARD/5.jpg  
  inflating: Big_Cat/test/TIGER/1.jpg  
  inflating: Big_Cat/test/TIGER/5.jpg  
  inflating: Big_Cat/train/AFRICAN LEOPARD/001.jpg  
  inflating: Big_Cat/train/AFRICAN LEOPARD/236.jpg  
  inflating: Big_Cat/train/CARACAL/001.jpg  
  inflating: Big_Cat/train/CARACAL/236.jpg  
  inflating: Big_Cat/train/CHEETAH/001.jpg  
  inflating: Big_Cat/train/CHEETAH/235.jpg  
  inflating: Big_Cat/train/CLOUDED LEOPARD/001.jpg  
  inflating: Big_Cat/train/CLOUDED LEOPARD/229.jpg  
  inflating: Big_Cat/train/JAGUAR/001.jpg  
  inflating: Big_Cat/train/JAGUAR/238.jpg  
  inflating: Big_Cat/train/LIONS/001.jpg  
  inflating: Big_Cat/train/LIONS/228.jpg  
  inflating: Big_Cat/train/OCELOT/001.jpg  
  inflating: Big_Cat/train/OCELOT/233.jpg  
  inflating: Big_Cat/train/PUMA/001.jpg  
  inflating: Big_Cat/train/PUMA/236.jpg  
  inflating: Big_Cat/train/SNOW LEOPARD/001.jpg  
  inflating: Big_Cat/train/SNOW LEOPARD/231.jpg  
  inflating: Big_Cat/train/TIGER/001.jpg  
  inflating: Big_Cat/train/TIGER/237.jpg  
  inflating: Big_Cat/valid/AFRICAN LEOPARD/1.jpg  
  inflating: Big_Cat/valid/AFRICAN LEOPARD/5.jpg  
  inflating: Big_Cat/valid/CARACAL/1.jpg
  inflating: Big_Cat/valid/CARACAL/5.jpg  
  inflating: Big_Cat/valid/CHEETAH/1.jpg  
  inflating: Big_Cat/valid/CHEETAH/5.jpg  
  inflating: Big_Cat/valid/CLOUDED LEOPARD/1.jpg  
  inflating: Big_Cat/valid/CLOUDED LEOPARD/5.jpg  
  inflating: Big_Cat/valid/JAGUAR/1.jpg  
  inflating: Big_Cat/valid/JAGUAR/5.jpg  
  inflating: Big_Cat/valid/LIONS/1.jpg  
  inflating: Big_Cat/valid/LIONS/5.jpg  
  inflating: Big_Cat/valid/OCELOT/1.jpg  
  inflating: Big_Cat/valid/OCELOT/5.jpg  
  inflating: Big_Cat/valid/PUMA/1.jpg  
  inflating: Big_Cat/valid/PUMA/5.jpg  
  inflating: Big_Cat/valid/SNOW LEOPARD/1.jpg  
  inflating: Big_Cat/valid/SNOW LEOPARD/5.jpg  
  inflating: Big_Cat/valid/TIGER/1.jpg  
  inflating: Big_Cat/valid/TIGER/5.jpg  </code></pre>
</section>
<section id="remove-all-files-with-the-.h5-extension-and-move-images-from-the-valid-folder-to-their-corresponding-subfolders-in-the-train-folder" class="level4">
<h4 class="anchored" data-anchor-id="remove-all-files-with-the-.h5-extension-and-move-images-from-the-valid-folder-to-their-corresponding-subfolders-in-the-train-folder">Remove all files with the “.h5” extension and move images from the “valid” folder to their corresponding subfolders in the “train” folder</h4>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> shutil</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the absolute paths of main, train and valid folders</span></span>
<span id="cb5-5">big_cat_folder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/Big_Cat/'</span></span>
<span id="cb5-6">train_folder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/Big_Cat/train'</span></span>
<span id="cb5-7">valid_folder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/Big_Cat/valid'</span></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove all files with ".h5" extension</span></span>
<span id="cb5-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>find {big_cat_folder} <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>name <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.h5'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>delete</span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary to track image counts</span></span>
<span id="cb5-13">image_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of subfolders in the train folder</span></span>
<span id="cb5-16">train_subfolders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [f.path <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.scandir(train_folder) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> f.is_dir()]</span>
<span id="cb5-17"></span>
<span id="cb5-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of subfolders in the valid folder</span></span>
<span id="cb5-19">valid_subfolders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [f.path <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.scandir(valid_folder) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> f.is_dir()]</span>
<span id="cb5-20"></span>
<span id="cb5-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move images from valid to their corresponding subfolders in train</span></span>
<span id="cb5-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> subfolder <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> valid_subfolders:</span>
<span id="cb5-23">    class_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.basename(subfolder)</span>
<span id="cb5-24">    train_subfolder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(train_folder, class_name)</span>
<span id="cb5-25"></span>
<span id="cb5-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the train subfolder if it doesn't exist</span></span>
<span id="cb5-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> os.path.exists(train_subfolder):</span>
<span id="cb5-28">        os.makedirs(train_subfolder)</span>
<span id="cb5-29"></span>
<span id="cb5-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize counts in the dictionary</span></span>
<span id="cb5-31">    image_counts[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>class_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_VALID"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(os.listdir(subfolder))</span>
<span id="cb5-32"></span>
<span id="cb5-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move images from valid to train subfolder and update counts</span></span>
<span id="cb5-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(subfolder):</span>
<span id="cb5-35">        file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(subfolder, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb5-36">        dest_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(train_subfolder, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb5-37">        shutil.move(file_path, dest_path)</span>
<span id="cb5-38"></span>
<span id="cb5-39"></span>
<span id="cb5-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the empty valid subfolders</span></span>
<span id="cb5-41"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> subfolder <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> valid_subfolders:</span>
<span id="cb5-42">    os.rmdir(subfolder)</span>
<span id="cb5-43"></span>
<span id="cb5-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get count of images in train folder so that we can understand on how much we are training</span></span>
<span id="cb5-45"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> subfolder <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> train_subfolders:</span>
<span id="cb5-46">    class_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.basename(subfolder)</span>
<span id="cb5-47">    image_counts[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>class_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_TRAIN"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(os.listdir(subfolder))</span>
<span id="cb5-48"></span>
<span id="cb5-49">sorted_image_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(image_counts.items()))</span>
<span id="cb5-50"></span>
<span id="cb5-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the sorted image counts dictionary</span></span>
<span id="cb5-52"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sorted Image Counts:"</span>)</span>
<span id="cb5-53"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key, value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sorted_image_counts.items():</span>
<span id="cb5-54">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<pre><code>Sorted Image Counts:
AFRICAN LEOPARD_TRAIN: 241
AFRICAN LEOPARD_VALID: 5
CARACAL_TRAIN: 241
CARACAL_VALID: 5
CHEETAH_TRAIN: 240
CHEETAH_VALID: 5
CLOUDED LEOPARD_TRAIN: 234
CLOUDED LEOPARD_VALID: 5
JAGUAR_TRAIN: 243
JAGUAR_VALID: 5
LIONS_TRAIN: 233
LIONS_VALID: 5
OCELOT_TRAIN: 238
OCELOT_VALID: 5
PUMA_TRAIN: 241
PUMA_VALID: 5
SNOW LEOPARD_TRAIN: 236
SNOW LEOPARD_VALID: 5
TIGER_TRAIN: 242
TIGER_VALID: 5</code></pre>
</section>
<section id="install-latest-fastai-version" class="level4">
<h4 class="anchored" data-anchor-id="install-latest-fastai-version">Install latest FastAI Version</h4>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#hide</span></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> [ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>content ] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Uqq fastbook</span>
<span id="cb7-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> pip install timm</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fastbook</span>
<span id="cb7-6">fastbook.setup_book()</span>
<span id="cb7-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> timm</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#hide</span></span>
<span id="cb7-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastbook <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb7-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.widgets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb7-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
<pre><code>[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m719.8/719.8 kB[0m [31m7.1 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m510.5/510.5 kB[0m [31m11.6 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m116.3/116.3 kB[0m [31m13.7 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m194.1/194.1 kB[0m [31m2.0 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m134.8/134.8 kB[0m [31m12.0 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m1.6/1.6 MB[0m [31m19.3 MB/s[0m eta [36m0:00:00[0m
[?25hCollecting timm
  Downloading timm-0.9.16-py3-none-any.whl (2.2 MB)
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m2.2/2.2 MB[0m [31m15.2 MB/s[0m eta [36m0:00:00[0m
[?25hRequirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from timm) (2.2.1+cu121)
Requirement already satisfied: torchvision in /usr/local/lib/python3.10/dist-packages (from timm) (0.17.1+cu121)
Requirement already satisfied: pyyaml in /usr/local/lib/python3.10/dist-packages (from timm) (6.0.1)
Requirement already satisfied: huggingface_hub in /usr/local/lib/python3.10/dist-packages (from timm) (0.20.3)
Requirement already satisfied: safetensors in /usr/local/lib/python3.10/dist-packages (from timm) (0.4.2)
Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from huggingface_hub-&gt;timm) (3.13.3)
Requirement already satisfied: fsspec&gt;=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub-&gt;timm) (2023.6.0)
Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface_hub-&gt;timm) (2.31.0)
Requirement already satisfied: tqdm&gt;=4.42.1 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub-&gt;timm) (4.66.2)
Requirement already satisfied: typing-extensions&gt;=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub-&gt;timm) (4.10.0)
Requirement already satisfied: packaging&gt;=20.9 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub-&gt;timm) (24.0)
Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch-&gt;timm) (1.12)
Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch-&gt;timm) (3.2.1)
Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch-&gt;timm) (3.1.3)
Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch-&gt;timm) (12.1.105)
Requirement already satisfied: nvidia-cuda-runtime-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch-&gt;timm) (12.1.105)
Requirement already satisfied: nvidia-cuda-cupti-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch-&gt;timm) (12.1.105)
Requirement already satisfied: nvidia-cudnn-cu12==8.9.2.26 in /usr/local/lib/python3.10/dist-packages (from torch-&gt;timm) (8.9.2.26)
Requirement already satisfied: nvidia-cublas-cu12==12.1.3.1 in /usr/local/lib/python3.10/dist-packages (from torch-&gt;timm) (12.1.3.1)
Requirement already satisfied: nvidia-cufft-cu12==11.0.2.54 in /usr/local/lib/python3.10/dist-packages (from torch-&gt;timm) (11.0.2.54)
Requirement already satisfied: nvidia-curand-cu12==10.3.2.106 in /usr/local/lib/python3.10/dist-packages (from torch-&gt;timm) (10.3.2.106)
Requirement already satisfied: nvidia-cusolver-cu12==11.4.5.107 in /usr/local/lib/python3.10/dist-packages (from torch-&gt;timm) (11.4.5.107)
Requirement already satisfied: nvidia-cusparse-cu12==12.1.0.106 in /usr/local/lib/python3.10/dist-packages (from torch-&gt;timm) (12.1.0.106)
Requirement already satisfied: nvidia-nccl-cu12==2.19.3 in /usr/local/lib/python3.10/dist-packages (from torch-&gt;timm) (2.19.3)
Requirement already satisfied: nvidia-nvtx-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch-&gt;timm) (12.1.105)
Requirement already satisfied: triton==2.2.0 in /usr/local/lib/python3.10/dist-packages (from torch-&gt;timm) (2.2.0)
Requirement already satisfied: nvidia-nvjitlink-cu12 in /usr/local/lib/python3.10/dist-packages (from nvidia-cusolver-cu12==11.4.5.107-&gt;torch-&gt;timm) (12.4.127)
Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from torchvision-&gt;timm) (1.25.2)
Requirement already satisfied: pillow!=8.3.*,&gt;=5.3.0 in /usr/local/lib/python3.10/dist-packages (from torchvision-&gt;timm) (9.4.0)
Requirement already satisfied: MarkupSafe&gt;=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2-&gt;torch-&gt;timm) (2.1.5)
Requirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;huggingface_hub-&gt;timm) (3.3.2)
Requirement already satisfied: idna&lt;4,&gt;=2.5 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;huggingface_hub-&gt;timm) (3.6)
Requirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;huggingface_hub-&gt;timm) (2.0.7)
Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;huggingface_hub-&gt;timm) (2024.2.2)
Requirement already satisfied: mpmath&gt;=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy-&gt;torch-&gt;timm) (1.3.0)
Installing collected packages: timm
Successfully installed timm-0.9.16
Mounted at /content/gdrive</code></pre>
<p><code>verify_images()</code> will return path of images which are corrupt and using <code>unlink</code> we can remove these files.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Big_Cat'</span>)</span>
<span id="cb9-2"></span>
<span id="cb9-3">fns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(path)</span>
<span id="cb9-4">total_imagelength <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(fns)</span>
<span id="cb9-5">failed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verify_images(fns)</span>
<span id="cb9-6">failed_imagelength <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(failed)</span>
<span id="cb9-7"></span>
<span id="cb9-8">failed.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(Path.unlink)</span>
<span id="cb9-9">Image_Count_Dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total_Image_Count"</span>: total_imagelength, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed_Image_Count"</span>: failed_imagelength}</span>
<span id="cb9-10">Image_Count_Dict</span></code></pre></div>
<pre><code>/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()





{'Total_Image_Count': 2439, 'Failed_Image_Count': 0}</code></pre>
<p>We have good chunk of images to be trained on</p>
</section>
</section>
<section id="prepare-data-for-model-training-data-loaders-data-augmentaion-etc.." class="level3">
<h3 class="anchored" data-anchor-id="prepare-data-for-model-training-data-loaders-data-augmentaion-etc..">1.2 : Prepare data for model training (Data Loaders, Data Augmentaion, etc.).</h3>
<section id="data-loaders" class="level4">
<h4 class="anchored" data-anchor-id="data-loaders">Data Loaders</h4>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">big_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(</span>
<span id="cb11-2">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ImageBlock, CategoryBlock),</span>
<span id="cb11-3">    get_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_image_files,</span>
<span id="cb11-4">    splitter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb11-5">    get_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parent_label,</span>
<span id="cb11-6">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>))</span>
<span id="cb11-7">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> big_cat.dataloaders(path)</span>
<span id="cb11-8"></span>
<span id="cb11-9">dls.valid.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect3/Lecture_3_Deployment_Self_files/Lecture_3_Deployment_Self_15_0.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">png</figcaption>
</figure>
</div>
</section>
<section id="data-augmentation" class="level4">
<h4 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h4>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">big_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> big_cat.new(</span>
<span id="cb12-2">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomResizedCrop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb12-3">    batch_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms())</span>
<span id="cb12-4">big_cat_dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> big_cat.dataloaders(path)</span>
<span id="cb12-5">big_cat_dls.train.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect3/Lecture_3_Deployment_Self_files/Lecture_3_Deployment_Self_17_0.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">png</figcaption>
</figure>
</div>
</section>
</section>
<section id="train-model" class="level3">
<h3 class="anchored" data-anchor-id="train-model">1.3 : Train Model</h3>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(big_cat_dls, resnet34, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb13-2">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<pre><code>Downloading: "https://download.pytorch.org/models/resnet34-b627a593.pth" to /root/.cache/torch/hub/checkpoints/resnet34-b627a593.pth
100%|██████████| 83.3M/83.3M [00:00&lt;00:00, 164MB/s]</code></pre>


<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
epoch
</th>
<th>
train_loss
</th>
<th>
valid_loss
</th>
<th>
error_rate
</th>
<th>
time
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
0
</td>
<td>
1.837715
</td>
<td>
0.237122
</td>
<td>
0.088296
</td>
<td>
00:13
</td>
</tr>
</tbody>

</table>


<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
epoch
</th>
<th>
train_loss
</th>
<th>
valid_loss
</th>
<th>
error_rate
</th>
<th>
time
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
0
</td>
<td>
0.565063
</td>
<td>
0.141556
</td>
<td>
0.041068
</td>
<td>
00:18
</td>
</tr>
<tr>
<td>
1
</td>
<td>
0.431256
</td>
<td>
0.147855
</td>
<td>
0.051335
</td>
<td>
00:20
</td>
</tr>
<tr>
<td>
2
</td>
<td>
0.337753
</td>
<td>
0.119496
</td>
<td>
0.036961
</td>
<td>
00:17
</td>
</tr>
<tr>
<td>
3
</td>
<td>
0.268090
</td>
<td>
0.115800
</td>
<td>
0.032854
</td>
<td>
00:14
</td>
</tr>
</tbody>

</table>
<p>understand structure of model</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">learn.summary()</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<pre><code>Sequential (Input shape: 64 x 3 x 224 x 224)
============================================================================
Layer (type)         Output Shape         Param #    Trainable 
============================================================================
                     64 x 64 x 112 x 112 
Conv2d                                    9408       True      
BatchNorm2d                               128        True      
ReLU                                                           
____________________________________________________________________________
                     64 x 64 x 56 x 56   
MaxPool2d                                                      
Conv2d                                    36864      True      
BatchNorm2d                               128        True      
ReLU                                                           
Conv2d                                    36864      True      
BatchNorm2d                               128        True      
Conv2d                                    36864      True      
BatchNorm2d                               128        True      
ReLU                                                           
Conv2d                                    36864      True      
BatchNorm2d                               128        True      
Conv2d                                    36864      True      
BatchNorm2d                               128        True      
ReLU                                                           
Conv2d                                    36864      True      
BatchNorm2d                               128        True      
____________________________________________________________________________
                     64 x 128 x 28 x 28  
Conv2d                                    73728      True      
BatchNorm2d                               256        True      
ReLU                                                           
Conv2d                                    147456     True      
BatchNorm2d                               256        True      
Conv2d                                    8192       True      
BatchNorm2d                               256        True      
Conv2d                                    147456     True      
BatchNorm2d                               256        True      
ReLU                                                           
Conv2d                                    147456     True      
BatchNorm2d                               256        True      
Conv2d                                    147456     True      
BatchNorm2d                               256        True      
ReLU                                                           
Conv2d                                    147456     True      
BatchNorm2d                               256        True      
Conv2d                                    147456     True      
BatchNorm2d                               256        True      
ReLU                                                           
Conv2d                                    147456     True      
BatchNorm2d                               256        True      
____________________________________________________________________________
                     64 x 256 x 14 x 14  
Conv2d                                    294912     True      
BatchNorm2d                               512        True      
ReLU                                                           
Conv2d                                    589824     True      
BatchNorm2d                               512        True      
Conv2d                                    32768      True      
BatchNorm2d                               512        True      
Conv2d                                    589824     True      
BatchNorm2d                               512        True      
ReLU                                                           
Conv2d                                    589824     True      
BatchNorm2d                               512        True      
Conv2d                                    589824     True      
BatchNorm2d                               512        True      
ReLU                                                           
Conv2d                                    589824     True      
BatchNorm2d                               512        True      
Conv2d                                    589824     True      
BatchNorm2d                               512        True      
ReLU                                                           
Conv2d                                    589824     True      
BatchNorm2d                               512        True      
Conv2d                                    589824     True      
BatchNorm2d                               512        True      
ReLU                                                           
Conv2d                                    589824     True      
BatchNorm2d                               512        True      
Conv2d                                    589824     True      
BatchNorm2d                               512        True      
ReLU                                                           
Conv2d                                    589824     True      
BatchNorm2d                               512        True      
____________________________________________________________________________
                     64 x 512 x 7 x 7    
Conv2d                                    1179648    True      
BatchNorm2d                               1024       True      
ReLU                                                           
Conv2d                                    2359296    True      
BatchNorm2d                               1024       True      
Conv2d                                    131072     True      
BatchNorm2d                               1024       True      
Conv2d                                    2359296    True      
BatchNorm2d                               1024       True      
ReLU                                                           
Conv2d                                    2359296    True      
BatchNorm2d                               1024       True      
Conv2d                                    2359296    True      
BatchNorm2d                               1024       True      
ReLU                                                           
Conv2d                                    2359296    True      
BatchNorm2d                               1024       True      
____________________________________________________________________________
                     64 x 512 x 1 x 1    
AdaptiveAvgPool2d                                              
AdaptiveMaxPool2d                                              
____________________________________________________________________________
                     64 x 1024           
Flatten                                                        
BatchNorm1d                               2048       True      
Dropout                                                        
____________________________________________________________________________
                     64 x 512            
Linear                                    524288     True      
ReLU                                                           
BatchNorm1d                               1024       True      
Dropout                                                        
____________________________________________________________________________
                     64 x 10             
Linear                                    5120       True      
____________________________________________________________________________

Total params: 21,817,152
Total trainable params: 21,817,152
Total non-trainable params: 0

Optimizer used: &lt;function Adam at 0x7b5a37dbbeb0&gt;
Loss function: FlattenedLoss of CrossEntropyLoss()

Model unfrozen

Callbacks:
  - TrainEvalCallback
  - CastToTensor
  - Recorder
  - ProgressCallback</code></pre>
<section id="confusion-metric" class="level4">
<h4 class="anchored" data-anchor-id="confusion-metric">Confusion Metric</h4>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">interp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClassificationInterpretation.from_learner(learn)</span>
<span id="cb17-2">interp.plot_confusion_matrix()</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect3/Lecture_3_Deployment_Self_files/Lecture_3_Deployment_Self_23_4.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">png</figcaption>
</figure>
</div>
</section>
<section id="display-images-with-highest-loss-to-get-the-picture" class="level4">
<h4 class="anchored" data-anchor-id="display-images-with-highest-loss-to-get-the-picture">Display Images with highest loss, to Get the picture 😊</h4>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">interp.plot_top_losses(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect3/Lecture_3_Deployment_Self_files/Lecture_3_Deployment_Self_25_2.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">png</figcaption>
</figure>
</div>
<p>We can observe from both the confusion matrix and visual representation that the model is having difficulty differentiating between the Jaguar and the African Leopard. Even I find it challenging to distinguish between the two. 😵 So, we can let it be.</p>
</section>
</section>
<section id="clear-the-data" class="level3">
<h3 class="anchored" data-anchor-id="clear-the-data">1.4 : Clear the data</h3>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#hide_output</span></span>
<span id="cb19-2">cleaner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageClassifierCleaner(learn)</span>
<span id="cb19-3">cleaner</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<pre><code>VBox(children=(Dropdown(options=('AFRICAN LEOPARD', 'CARACAL', 'CHEETAH', 'CLOUDED LEOPARD', 'JAGUAR', 'LIONS'…</code></pre>
<section id="apply-those-changes" class="level4">
<h4 class="anchored" data-anchor-id="apply-those-changes">Apply those changes</h4>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cleaner.delete(): cleaner.fns[idx].unlink()</span>
<span id="cb21-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx,cat <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cleaner.change(): shutil.move(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(cleaner.fns[idx]), path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>cat)</span></code></pre></div>
</section>
</section>
</section>
<section id="level-2-understand-computer-vision-architectures" class="level2">
<h2 class="anchored" data-anchor-id="level-2-understand-computer-vision-architectures">Level 2 : Understand Computer Vision Architectures</h2>
<section id="timm-is-a-wonderful-library-by-ross-wightman-which-provides-state-of-the-art-pre-trained-computer-vision-models.-its-like-huggingface-transformers-but-for-computer-vision-instead-of-nlp." class="level4">
<h4 class="anchored" data-anchor-id="timm-is-a-wonderful-library-by-ross-wightman-which-provides-state-of-the-art-pre-trained-computer-vision-models.-its-like-huggingface-transformers-but-for-computer-vision-instead-of-nlp."><a href="https://timm.fast.ai/">timm</a> is a wonderful library by Ross Wightman which provides state-of-the-art pre-trained computer vision models. It’s like Huggingface Transformers, but for computer vision instead of NLP.</h4>
</section>
<section id="download-data" class="level3">
<h3 class="anchored" data-anchor-id="download-data">2.1 : Download Data</h3>
<p>Let’s download Ross’s GitHub repository, which is regularly updated with benchmark data for computer vision architectures. These benchmark are created on <strong>Imagenet.</strong></p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> git clone <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>depth <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>github.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>rwightman<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>pytorch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>models.git</span>
<span id="cb22-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>cd pytorch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>models<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>results</span></code></pre></div>
<pre><code>Cloning into 'pytorch-image-models'...
remote: Enumerating objects: 572, done.[K
remote: Counting objects: 100% (572/572), done.[K
remote: Compressing objects: 100% (403/403), done.[K
remote: Total 572 (delta 222), reused 341 (delta 163), pack-reused 0[K
Receiving objects: 100% (572/572), 2.59 MiB | 4.87 MiB/s, done.
Resolving deltas: 100% (222/222), done.
/content/pytorch-image-models/results/pytorch-image-models/results</code></pre>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb24-2"></span>
<span id="cb24-3">Benchmark_Result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'results-imagenet.csv'</span>)</span>
<span id="cb24-4">Benchmark_Result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_org'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Benchmark_Result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>]</span>
<span id="cb24-5">Benchmark_Result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Benchmark_Result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb24-6">Benchmark_Result.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
model
</th>
<th>
top1
</th>
<th>
top1_err
</th>
<th>
top5
</th>
<th>
top5_err
</th>
<th>
param_count
</th>
<th>
img_size
</th>
<th>
crop_pct
</th>
<th>
interpolation
</th>
<th>
model_org
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
eva02_large_patch14_448
</td>
<td>
90.052
</td>
<td>
9.948
</td>
<td>
99.048
</td>
<td>
0.952
</td>
<td>
305.08
</td>
<td>
448
</td>
<td>
1.0
</td>
<td>
bicubic
</td>
<td>
eva02_large_patch14_448.mim_m38m_ft_in22k_in1k
</td>
</tr>
<tr>
<th>
1
</th>
<td>
eva02_large_patch14_448
</td>
<td>
89.970
</td>
<td>
10.030
</td>
<td>
99.012
</td>
<td>
0.988
</td>
<td>
305.08
</td>
<td>
448
</td>
<td>
1.0
</td>
<td>
bicubic
</td>
<td>
eva02_large_patch14_448.mim_in22k_ft_in22k_in1k
</td>
</tr>
<tr>
<th>
2
</th>
<td>
eva_giant_patch14_560
</td>
<td>
89.786
</td>
<td>
10.214
</td>
<td>
98.992
</td>
<td>
1.008
</td>
<td>
1,014.45
</td>
<td>
560
</td>
<td>
1.0
</td>
<td>
bicubic
</td>
<td>
eva_giant_patch14_560.m30m_ft_in22k_in1k
</td>
</tr>
<tr>
<th>
3
</th>
<td>
eva02_large_patch14_448
</td>
<td>
89.622
</td>
<td>
10.378
</td>
<td>
98.950
</td>
<td>
1.050
</td>
<td>
305.08
</td>
<td>
448
</td>
<td>
1.0
</td>
<td>
bicubic
</td>
<td>
eva02_large_patch14_448.mim_in22k_ft_in1k
</td>
</tr>
<tr>
<th>
4
</th>
<td>
eva02_large_patch14_448
</td>
<td>
89.574
</td>
<td>
10.426
</td>
<td>
98.924
</td>
<td>
1.076
</td>
<td>
305.08
</td>
<td>
448
</td>
<td>
1.0
</td>
<td>
bicubic
</td>
<td>
eva02_large_patch14_448.mim_m38m_ft_in1k
</td>
</tr>
</tbody>

</table>
<p>Let’s add a “family” column that will allow us to group architectures into categories with similar characteristics:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_data(part, col):</span>
<span id="cb25-2">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'benchmark-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>part<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-amp-nhwc-pt111-cu113-rtx3090.csv'</span>).merge(Benchmark_Result, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>)</span>
<span id="cb25-3">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'secs'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df[col]</span>
<span id="cb25-4">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.extract(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^([a-z]+?(?:v2)?)(?:\d|_|$)'</span>)</span>
<span id="cb25-5">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>df.model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.endswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gn'</span>)]</span>
<span id="cb25-6">    df.loc[df.model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.contains(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in22'</span>),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.loc[df.model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.contains(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in22'</span>),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_in22'</span></span>
<span id="cb25-7">    df.loc[df.model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.contains(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resnet.*d'</span>),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.loc[df.model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.contains(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resnet.*d'</span>),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span></span>
<span id="cb25-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> df[df.family.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.contains(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^re[sg]netd?|beit|convnext|levit|efficient|vit|vgg|swin'</span>)]</span>
<span id="cb25-9"></span>
<span id="cb25-10">Inference_Data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_data(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'infer'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'infer_samples_per_sec'</span>)</span>
<span id="cb25-11">Inference_Data.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
model
</th>
<th>
infer_samples_per_sec
</th>
<th>
infer_step_time
</th>
<th>
infer_batch_size
</th>
<th>
infer_img_size
</th>
<th>
param_count_x
</th>
<th>
top1
</th>
<th>
top1_err
</th>
<th>
top5
</th>
<th>
top5_err
</th>
<th>
param_count_y
</th>
<th>
img_size
</th>
<th>
crop_pct
</th>
<th>
interpolation
</th>
<th>
model_org
</th>
<th>
secs
</th>
<th>
family
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
12
</th>
<td>
levit_128s
</td>
<td>
21485.80
</td>
<td>
47.648
</td>
<td>
1024
</td>
<td>
224
</td>
<td>
7.78
</td>
<td>
76.526
</td>
<td>
23.474
</td>
<td>
92.872
</td>
<td>
7.128
</td>
<td>
7.78
</td>
<td>
224
</td>
<td>
0.900
</td>
<td>
bicubic
</td>
<td>
levit_128s.fb_dist_in1k
</td>
<td>
0.000047
</td>
<td>
levit
</td>
</tr>
<tr>
<th>
13
</th>
<td>
regnetx_002
</td>
<td>
17821.98
</td>
<td>
57.446
</td>
<td>
1024
</td>
<td>
224
</td>
<td>
2.68
</td>
<td>
68.752
</td>
<td>
31.248
</td>
<td>
88.542
</td>
<td>
11.458
</td>
<td>
2.68
</td>
<td>
224
</td>
<td>
0.875
</td>
<td>
bicubic
</td>
<td>
regnetx_002.pycls_in1k
</td>
<td>
0.000056
</td>
<td>
regnetx
</td>
</tr>
<tr>
<th>
15
</th>
<td>
regnety_002
</td>
<td>
16673.08
</td>
<td>
61.405
</td>
<td>
1024
</td>
<td>
224
</td>
<td>
3.16
</td>
<td>
70.280
</td>
<td>
29.720
</td>
<td>
89.530
</td>
<td>
10.470
</td>
<td>
3.16
</td>
<td>
224
</td>
<td>
0.875
</td>
<td>
bicubic
</td>
<td>
regnety_002.pycls_in1k
</td>
<td>
0.000060
</td>
<td>
regnety
</td>
</tr>
<tr>
<th>
17
</th>
<td>
levit_128
</td>
<td>
14657.83
</td>
<td>
69.849
</td>
<td>
1024
</td>
<td>
224
</td>
<td>
9.21
</td>
<td>
78.490
</td>
<td>
21.510
</td>
<td>
94.012
</td>
<td>
5.988
</td>
<td>
9.21
</td>
<td>
224
</td>
<td>
0.900
</td>
<td>
bicubic
</td>
<td>
levit_128.fb_dist_in1k
</td>
<td>
0.000068
</td>
<td>
levit
</td>
</tr>
<tr>
<th>
18
</th>
<td>
regnetx_004
</td>
<td>
14440.03
</td>
<td>
70.903
</td>
<td>
1024
</td>
<td>
224
</td>
<td>
5.16
</td>
<td>
72.402
</td>
<td>
27.598
</td>
<td>
90.826
</td>
<td>
9.174
</td>
<td>
5.16
</td>
<td>
224
</td>
<td>
0.875
</td>
<td>
bicubic
</td>
<td>
regnetx_004.pycls_in1k
</td>
<td>
0.000069
</td>
<td>
regnetx
</td>
</tr>
</tbody>

</table>
</section>
<section id="plot-of-all-the-architectures." class="level3">
<h3 class="anchored" data-anchor-id="plot-of-all-the-architectures.">2.2 : Plot of all the architectures.</h3>
<p>Here’s the results for inference performance (see the last section for training performance). In this chart:</p>
<ul>
<li><p>the x axis shows how many seconds it takes to process one image (note: it’s a log scale)</p></li>
<li><p>the y axis is the accuracy on Imagenet</p></li>
<li><p>the size of each bubble is proportional to the size of images used in testing</p></li>
<li><p>the color shows what “family” the architecture is from.</p></li>
</ul>
<p>Hover your mouse over a marker to see details about the model. Double-click in the legend to display just one family. Single-click in the legend to show or hide a family.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.express <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> px</span>
<span id="cb26-2">w,h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span></span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show_all(Inference_Data, title, size):</span>
<span id="cb26-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> px.scatter(Inference_Data, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>w, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>h, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Inference_Data[size]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>title,</span>
<span id="cb26-6">        x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'secs'</span>,  y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top1'</span>, log_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family'</span>, hover_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_org'</span>, hover_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[size])</span>
<span id="cb26-7"></span></code></pre></div>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">show_all(Inference_Data, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inference'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'infer_img_size'</span>)</span></code></pre></div>
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect3/Lecture_3_Deployment_Self_files/Lecture_3_Deployment_Self_30_2.PNG" class="img-fluid"></p>
</section>
<section id="specific-architectures-plot" class="level3">
<h3 class="anchored" data-anchor-id="specific-architectures-plot">2.3 : Specific Architectures Plot</h3>
<p>Let’s create a plot for selected architectures which we would like to use normally</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter data only for convnext, resnet</span></span>
<span id="cb28-2">keywords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'convnext'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resnet'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'levit'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'beit'</span>]</span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter rows based on the exact keywords</span></span>
<span id="cb28-5">Best_Model_Df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Inference_Data[Inference_Data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family'</span>].isin(keywords)]</span>
<span id="cb28-6"></span>
<span id="cb28-7">show_all(Best_Model_Df, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inference'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'infer_img_size'</span>)</span></code></pre></div>
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect3/Lecture_3_Deployment_Self_files/Lecture_3_Deployment_Self_30_3.PNG" class="img-fluid"></p>
</section>
<section id="family-connection-plot" class="level3">
<h3 class="anchored" data-anchor-id="family-connection-plot">2.4 : Family Connection Plot</h3>
<p>Let’s add lines through the points of each family, to help see how they compare – but note that we can see that a linear fit isn’t actually ideal here! It’s just there to help visually see the groups.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'levit|resnetd?|regnetx|vgg|convnext.*|efficientnetv2|beit|swin'</span></span>
<span id="cb29-2"></span>
<span id="cb29-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show_subs(Inference_Data, title, size):</span>
<span id="cb29-4">    df_subs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Inference_Data[Inference_Data.family.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.fullmatch(subs)]</span>
<span id="cb29-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> px.scatter(df_subs, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>w, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>h, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_subs[size]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>title,</span>
<span id="cb29-6">        trendline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ols"</span>, trendline_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log_x'</span>:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>},</span>
<span id="cb29-7">        x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'secs'</span>,  y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top1'</span>, log_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family'</span>, hover_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_org'</span>, hover_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[size])</span></code></pre></div>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">show_subs(Inference_Data, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inference'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'infer_img_size'</span>)</span></code></pre></div>
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect3/Lecture_3_Deployment_Self_files/Lecture_3_Deployment_Self_30_4.PNG" class="img-fluid"></p>
<section id="we-can-conclude-that-convnext-can-be-go-to-model-with-decent-gpu-at-our-disposal-because-it-has-more-accuracy-then-resenet-and-it-take-less-time-than-beit" class="level4">
<h4 class="anchored" data-anchor-id="we-can-conclude-that-convnext-can-be-go-to-model-with-decent-gpu-at-our-disposal-because-it-has-more-accuracy-then-resenet-and-it-take-less-time-than-beit">We can conclude that <code>Convnext</code> can be go to model with decent GPU at our disposal, because it has more accuracy then resenet and it take less time than <code>beit</code></h4>
</section>
</section>
</section>
<section id="level-3-build-a-model-using-convnextbasic-or-tiny" class="level2">
<h2 class="anchored" data-anchor-id="level-3-build-a-model-using-convnextbasic-or-tiny">Level 3 : Build a model using Convnext(basic or tiny)</h2>
<p>List of all the basic &amp; tiny version models in <code>Convnext</code> and choose the best.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">[model <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> model <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> timm.list_models(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'convnext*'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'base'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> model <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tiny'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> model]</span></code></pre></div>
<pre><code>['convnext_base',
 'convnext_tiny',
 'convnext_tiny_hnf',
 'convnextv2_base',
 'convnextv2_tiny']</code></pre>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">learn_conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, convnext_base, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate).to_fp16()</span>
<span id="cb33-2">learn_conv.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<pre><code>/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ConvNeXt_Base_Weights.IMAGENET1K_V1`. You can also use `weights=ConvNeXt_Base_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)</code></pre>


<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
epoch
</th>
<th>
train_loss
</th>
<th>
valid_loss
</th>
<th>
error_rate
</th>
<th>
time
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
0
</td>
<td>
1.130588
</td>
<td>
0.183650
</td>
<td>
0.045175
</td>
<td>
00:17
</td>
</tr>
</tbody>

</table>
<pre><code>/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()
/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()</code></pre>


<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
epoch
</th>
<th>
train_loss
</th>
<th>
valid_loss
</th>
<th>
error_rate
</th>
<th>
time
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
0
</td>
<td>
0.306945
</td>
<td>
0.164550
</td>
<td>
0.047228
</td>
<td>
00:20
</td>
</tr>
<tr>
<td>
1
</td>
<td>
0.253462
</td>
<td>
0.118687
</td>
<td>
0.026694
</td>
<td>
00:11
</td>
</tr>
<tr>
<td>
2
</td>
<td>
0.207020
</td>
<td>
0.103058
</td>
<td>
0.024641
</td>
<td>
00:11
</td>
</tr>
<tr>
<td>
3
</td>
<td>
0.175618
</td>
<td>
0.094374
</td>
<td>
0.020534
</td>
<td>
00:11
</td>
</tr>
<tr>
<td>
4
</td>
<td>
0.151438
</td>
<td>
0.092010
</td>
<td>
0.020534
</td>
<td>
00:13
</td>
</tr>
</tbody>

</table>
<p>Compared to the <code>resnet34</code> model, which had an error rate of 32%, the <code>convnext_base</code> model demonstrates a significant improvement with an error rate of just 21%</p>
<p>Structure of the architecture</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">learn_conv.summary()</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<pre><code>Sequential (Input shape: 64 x 3 x 128 x 128)
============================================================================
Layer (type)         Output Shape         Param #    Trainable 
============================================================================
                     64 x 128 x 32 x 32  
Conv2d                                    6272       True      
LayerNorm2d                               256        True      
Conv2d                                    6400       True      
____________________________________________________________________________
                     64 x 32 x 32 x 128  
Permute                                                        
LayerNorm                                 256        True      
____________________________________________________________________________
                     64 x 32 x 32 x 512  
Linear                                    66048      True      
GELU                                                           
____________________________________________________________________________
                     64 x 32 x 32 x 128  
Linear                                    65664      True      
____________________________________________________________________________
                     64 x 128 x 32 x 32  
Permute                                                        
StochasticDepth                                                
Conv2d                                    6400       True      
____________________________________________________________________________
                     64 x 32 x 32 x 128  
Permute                                                        
LayerNorm                                 256        True      
____________________________________________________________________________
                     64 x 32 x 32 x 512  
Linear                                    66048      True      
GELU                                                           
____________________________________________________________________________
                     64 x 32 x 32 x 128  
Linear                                    65664      True      
____________________________________________________________________________
                     64 x 128 x 32 x 32  
Permute                                                        
StochasticDepth                                                
Conv2d                                    6400       True      
____________________________________________________________________________
                     64 x 32 x 32 x 128  
Permute                                                        
LayerNorm                                 256        True      
____________________________________________________________________________
                     64 x 32 x 32 x 512  
Linear                                    66048      True      
GELU                                                           
____________________________________________________________________________
                     64 x 32 x 32 x 128  
Linear                                    65664      True      
____________________________________________________________________________
                     64 x 128 x 32 x 32  
Permute                                                        
StochasticDepth                                                
LayerNorm2d                               256        True      
____________________________________________________________________________
                     64 x 256 x 16 x 16  
Conv2d                                    131328     True      
Conv2d                                    12800      True      
____________________________________________________________________________
                     64 x 16 x 16 x 256  
Permute                                                        
LayerNorm                                 512        True      
____________________________________________________________________________
                     64 x 16 x 16 x 1024 
Linear                                    263168     True      
GELU                                                           
____________________________________________________________________________
                     64 x 16 x 16 x 256  
Linear                                    262400     True      
____________________________________________________________________________
                     64 x 256 x 16 x 16  
Permute                                                        
StochasticDepth                                                
Conv2d                                    12800      True      
____________________________________________________________________________
                     64 x 16 x 16 x 256  
Permute                                                        
LayerNorm                                 512        True      
____________________________________________________________________________
                     64 x 16 x 16 x 1024 
Linear                                    263168     True      
GELU                                                           
____________________________________________________________________________
                     64 x 16 x 16 x 256  
Linear                                    262400     True      
____________________________________________________________________________
                     64 x 256 x 16 x 16  
Permute                                                        
StochasticDepth                                                
Conv2d                                    12800      True      
____________________________________________________________________________
                     64 x 16 x 16 x 256  
Permute                                                        
LayerNorm                                 512        True      
____________________________________________________________________________
                     64 x 16 x 16 x 1024 
Linear                                    263168     True      
GELU                                                           
____________________________________________________________________________
                     64 x 16 x 16 x 256  
Linear                                    262400     True      
____________________________________________________________________________
                     64 x 256 x 16 x 16  
Permute                                                        
StochasticDepth                                                
LayerNorm2d                               512        True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Conv2d                                    524800     True      
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
Conv2d                                    25600      True      
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Permute                                                        
LayerNorm                                 1024       True      
____________________________________________________________________________
                     64 x 8 x 8 x 2048   
Linear                                    1050624    True      
GELU                                                           
____________________________________________________________________________
                     64 x 8 x 8 x 512    
Linear                                    1049088    True      
____________________________________________________________________________
                     64 x 512 x 8 x 8    
Permute                                                        
StochasticDepth                                                
LayerNorm2d                               1024       True      
____________________________________________________________________________
                     64 x 1024 x 4 x 4   
Conv2d                                    2098176    True      
Conv2d                                    51200      True      
____________________________________________________________________________
                     64 x 4 x 4 x 1024   
Permute                                                        
LayerNorm                                 2048       True      
____________________________________________________________________________
                     64 x 4 x 4 x 4096   
Linear                                    4198400    True      
GELU                                                           
____________________________________________________________________________
                     64 x 4 x 4 x 1024   
Linear                                    4195328    True      
____________________________________________________________________________
                     64 x 1024 x 4 x 4   
Permute                                                        
StochasticDepth                                                
Conv2d                                    51200      True      
____________________________________________________________________________
                     64 x 4 x 4 x 1024   
Permute                                                        
LayerNorm                                 2048       True      
____________________________________________________________________________
                     64 x 4 x 4 x 4096   
Linear                                    4198400    True      
GELU                                                           
____________________________________________________________________________
                     64 x 4 x 4 x 1024   
Linear                                    4195328    True      
____________________________________________________________________________
                     64 x 1024 x 4 x 4   
Permute                                                        
StochasticDepth                                                
Conv2d                                    51200      True      
____________________________________________________________________________
                     64 x 4 x 4 x 1024   
Permute                                                        
LayerNorm                                 2048       True      
____________________________________________________________________________
                     64 x 4 x 4 x 4096   
Linear                                    4198400    True      
GELU                                                           
____________________________________________________________________________
                     64 x 4 x 4 x 1024   
Linear                                    4195328    True      
____________________________________________________________________________
                     64 x 1024 x 4 x 4   
Permute                                                        
StochasticDepth                                                
____________________________________________________________________________
                     64 x 1024 x 1 x 1   
AdaptiveAvgPool2d                                              
AdaptiveMaxPool2d                                              
____________________________________________________________________________
                     64 x 2048           
Flatten                                                        
BatchNorm1d                               4096       True      
Dropout                                                        
____________________________________________________________________________
                     64 x 512            
Linear                                    1048576    True      
ReLU                                                           
BatchNorm1d                               1024       True      
Dropout                                                        
____________________________________________________________________________
                     64 x 10             
Linear                                    5120       True      
____________________________________________________________________________

Total params: 88,605,184
Total trainable params: 88,605,184
Total non-trainable params: 0

Optimizer used: &lt;function Adam at 0x7b5a37dbbeb0&gt;
Loss function: FlattenedLoss of CrossEntropyLoss()

Model unfrozen

Callbacks:
  - TrainEvalCallback
  - CastToTensor
  - MixedPrecision
  - Recorder
  - ProgressCallback</code></pre>
<p>Let’s downlod the model for future reference</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">learn_conv.export(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Big_Cat_Convnext_Model.pkl'</span>)</span>
<span id="cb38-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#learn_conv.export('/content/drive/MyDrive/Colab Notebooks/FastAI Course/Big_Cat_Convnext_Model.pkl')</span></span></code></pre></div>
</section>
<section id="level-4.-test-the-model" class="level2">
<h2 class="anchored" data-anchor-id="level-4.-test-the-model">Level 4. Test the Model</h2>
<p>Let’s test the model with an image</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb39-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gradio <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> gr</span></code></pre></div>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PILImage.create(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/drive/MyDrive/Colab Notebooks/FastAI Course/SnowLeopard.jpg'</span>)</span>
<span id="cb40-2">im.thumbnail((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>))</span>
<span id="cb40-3">im</span></code></pre></div>
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect3/Lecture_3_Deployment_Self_files/Lecture_3_Deployment_Self_59_0.png" class="img-fluid"></p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">learn_conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_learner(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/drive/MyDrive/Colab Notebooks/FastAI Course/Big_Cat_Convnext_Model.pkl'</span>)</span></code></pre></div>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">learn_conv.predict(im)</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<pre><code>('CHEETAH',
 tensor(2),
 tensor([1.0988e-04, 8.7617e-05, 9.2564e-01, 2.9294e-06, 1.2592e-06, 1.6162e-06,
         2.6748e-02, 6.5111e-07, 4.7398e-02, 7.3348e-06]))</code></pre>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">learn_conv.dls.vocab</span></code></pre></div>
<pre><code>['AFRICAN LEOPARD', 'CARACAL', 'CHEETAH', 'CLOUDED LEOPARD', 'JAGUAR', 'LIONS', 'OCELOT', 'PUMA', 'SNOW LEOPARD', 'TIGER']</code></pre>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">categories <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn_conv.dls.vocab</span>
<span id="cb46-2"></span>
<span id="cb46-3">pred, idx, probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn_conv.predict(im)</span>
<span id="cb46-4">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(categories, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,probs)))</span>
<span id="cb46-5">result</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<pre><code>{'AFRICAN LEOPARD': 0.00010988322173943743,
 'CARACAL': 8.761714707361534e-05,
 'CHEETAH': 0.9256432056427002,
 'CLOUDED LEOPARD': 2.929433776444057e-06,
 'JAGUAR': 1.2592141729328432e-06,
 'LIONS': 1.6162448446266353e-06,
 'OCELOT': 0.026747871190309525,
 'PUMA': 6.511066317216319e-07,
 'SNOW LEOPARD': 0.04739758372306824,
 'TIGER': 7.334848760365276e-06}</code></pre>
<p>Top 3 Predicted Cat Names with Highest Probability”</p>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">sorted_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(result.items(), key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> item: item[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>))</span>
<span id="cb48-2">top_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(sorted_result.keys())[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb48-3">top_classes</span></code></pre></div>
<pre><code>['CHEETAH', 'SNOW LEOPARD', 'OCELOT']</code></pre>
<p>So our model predicted <code>CHEETAH</code> with probablity of 93%</p>


</section>
</section>

 ]]></description>
  <category>Computer Vision</category>
  <category>FastAI</category>
  <guid>https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect3/index.html</guid>
  <pubDate>Sat, 13 Apr 2024 18:30:00 GMT</pubDate>
</item>
<item>
  <title>FastAI Course Lecture 2 Notes</title>
  <dc:creator>Kanav Sharma</dc:creator>
  <link>https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect2/index.html</link>
  <description><![CDATA[ 




<section id="this-notebook-is-to-enhance-my-learning-on-lecture-2-of-fast-ai-course-so-ill-be-creating-a-big-cat-classification-model" class="level1">
<h1>This notebook is to enhance my learning on lecture 2 of FAST AI course so I’ll be creating a big cat classification model</h1>
<p>Let’s install all required packages</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#hide</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> [ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>content ] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Uqq fastbook</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fastbook</span>
<span id="cb1-4">fastbook.setup_book()</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#hide</span></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastbook <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.widgets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
<pre><code>[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m719.8/719.8 kB[0m [31m7.6 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m510.5/510.5 kB[0m [31m10.6 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m116.3/116.3 kB[0m [31m12.1 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m194.1/194.1 kB[0m [31m9.0 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m134.8/134.8 kB[0m [31m15.4 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m1.6/1.6 MB[0m [31m16.3 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m23.7/23.7 MB[0m [31m15.0 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m823.6/823.6 kB[0m [31m26.3 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m14.1/14.1 MB[0m [31m53.7 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m731.7/731.7 MB[0m [31m901.8 kB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m410.6/410.6 MB[0m [31m2.0 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m121.6/121.6 MB[0m [31m8.2 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m56.5/56.5 MB[0m [31m12.1 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m124.2/124.2 MB[0m [31m8.3 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m196.0/196.0 MB[0m [31m2.3 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m166.0/166.0 MB[0m [31m7.2 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m99.1/99.1 kB[0m [31m15.6 MB/s[0m eta [36m0:00:00[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m21.1/21.1 MB[0m [31m68.6 MB/s[0m eta [36m0:00:00[0m
[?25hMounted at /content/gdrive</code></pre>
<section id="download-and-sort-out-the-dataimages." class="level2">
<h2 class="anchored" data-anchor-id="download-and-sort-out-the-dataimages.">1. Download and sort out the data(images).</h2>
<p>Extract Data using <strong>DuckDuckGo</strong> function</p>
<ol type="1">
<li><p>Create dynamic path according to their name store file</p></li>
<li><p>Create a dictionary to track the number of downloaded images per category (e.g., cat).</p></li>
</ol>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">??search_images_ddg</span></code></pre></div>
<p><em>Signature</em>: search_images_ddg(term, max_images=200)</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">cat_types <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Leopard'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cougar'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tiger'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lion'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cheetah'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SnowLeopard'</span></span>
<span id="cb4-2">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CAT'</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#remove folder with file in it</span></span>
<span id="cb4-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> shutil</span>
<span id="cb4-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> path.exists():</span>
<span id="cb4-7">  shutil.rmtree(path)</span>
<span id="cb4-8"></span>
<span id="cb4-9">per_cat_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> path.exists():</span>
<span id="cb4-12">    path.mkdir()</span>
<span id="cb4-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cat_types:</span>
<span id="cb4-14">        dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o)</span>
<span id="cb4-15">        dest.mkdir(exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-16">        results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search_images_ddg(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb4-17">        download_images(dest, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>results)</span>
<span id="cb4-18">        per_cat_count[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(results)</span></code></pre></div>
<pre><code>/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()</code></pre>
<p>Count of Images per category</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">per_cat_count</span></code></pre></div>
<pre><code>{'Leopard': 200,
 'Cougar': 200,
 'Tiger': 200,
 'Lion': 200,
 'Cheetah': 200,
 'SnowLeopard': 200}</code></pre>
<p>So we got 200 images per type</p>
<p>While downloading we can get corrupt images.So lets first remove them. <code>verify_images()</code> will return path of such images and using <code>unlink</code> we can remove these files.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">fns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(path)</span>
<span id="cb8-2">total_imagelength <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(fns)</span>
<span id="cb8-3">failed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verify_images(fns)</span>
<span id="cb8-4">failed_imagelength <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(failed)</span>
<span id="cb8-5">failed</span></code></pre></div>
<pre><code>(#51) [Path('CAT/Lion/d61427d6-f097-4727-a3ba-de31366199d6.jpg'),Path('CAT/Lion/85f17699-5ebe-4e88-9798-14b7e66281d7.png'),Path('CAT/Lion/84589c8d-a1da-45be-9fe6-1f87a34289b3.jpg'),Path('CAT/Lion/cf746926-23d6-4754-b7d0-25779410ee15.jpg'),Path('CAT/SnowLeopard/f3ce804b-5071-4312-8633-9895e721340c.jpg'),Path('CAT/SnowLeopard/961333aa-79da-4dc2-9f56-f4d07697a14e.jpg'),Path('CAT/SnowLeopard/57b3a667-1d3e-47bb-8fff-3e1505a5a12f.jpg'),Path('CAT/SnowLeopard/1b3f2639-1c5d-4e26-86c8-feb4b99bf76a.jpg'),Path('CAT/Cougar/cd7a89c9-8667-4d24-aceb-3a85bb7b247e.jpg'),Path('CAT/Cougar/44b6067c-f159-4d5f-819a-11e7d50a3fd8.jpg')...]</code></pre>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">failed.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(Path.unlink)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-2">Dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total_Image_Count"</span>: total_imagelength, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed_Image_Count"</span>: failed_imagelength}</span>
<span id="cb10-3">Dict</span></code></pre></div>
<pre><code>{'Total_Image_Count': 1115, 'Failed_Image_Count': 51}</code></pre>
</section>
<section id="prepare-data-for-model-training-data-loaders-data-augmentaion-etc.." class="level2">
<h2 class="anchored" data-anchor-id="prepare-data-for-model-training-data-loaders-data-augmentaion-etc..">2. Prepare data for model training (Data Loaders, Data Augmentaion, etc.).</h2>
<p>Create a data block and load that data block in data loader.</p>
<ul>
<li>Data Block - Is a blueprint on how to assemble data that we want to send for training.</li>
<li>Data Loader - Is used to pass that data which is in batch format(i.e created using data blocks) to the GPU.</li>
</ul>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">big_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(</span>
<span id="cb12-2">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ImageBlock, CategoryBlock),</span>
<span id="cb12-3">    get_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_image_files,</span>
<span id="cb12-4">    splitter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb12-5">    get_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parent_label,</span>
<span id="cb12-6">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>))</span>
<span id="cb12-7">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> big_cat.dataloaders(path)</span></code></pre></div>
<p><strong>DataBlock</strong> is a convenient way to organize the data loading, splitting, and transformation steps in preparation for training a deep learning model using the fastai library.</p>
<p><code>DataBlock()</code>: is suitable for a classification task where you have a dataset of images, and each image belongs to a specific category (e.g., types of cats).</p>
<p><code>blocks=(ImageBlock, CategoryBlock)</code>: It specify that our inputs are images &amp; our targets are categories(types of big cat)</p>
<p><code>get_image_files</code>: This helps to get list of all the images from subfolder.</p>
<p><code>parent_label</code>: This is a function that extracts the labels (categories) for each item.’Leapord’,‘Tiger’,‘Lion’</p>
<p>A <code>DataLoaders</code> includes validation and training <code>DataLoader</code>. Let’s check random validation dataset.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">dls.valid.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect2/Lecture_2_Production_Self_files/Lecture_2_Production_Self_19_0.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">png</figcaption>
</figure>
</div>
<p><strong>Squishing or Padding for Model Training :</strong></p>
<ul>
<li>Squishing or padding is applied to images during training.</li>
<li>Cropping may result in data loss, while squishing/stretching can lead to unrealistic shapes, impacting accuracy.</li>
<li>Padding may introduce excessive empty space, causing wasted computation.</li>
</ul>
<p><strong>Practical Approach - Data Augmentation:</strong> The idea of getting different picture every time from same image is called data augmentation.</p>
<ul>
<li>Randomly select and crop parts of the image during each epoch.</li>
<li>Train the model on different image parts across multiple epochs.</li>
<li>This approach creates random variations in input data without altering its meaning.</li>
<li>Aiming to provide diverse perspectives, it ensures that the model sees different pictures from the same image in each iteration..</li>
</ul>
<hr>
<p>To train our model, we’ll use <code>RandomResizedCrop</code> with an image size of 224 px, which is fairly standard for image classification, and default <code>aug_transforms</code>:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">big_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> big_cat.new(</span>
<span id="cb14-2">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomResizedCrop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb14-3">    batch_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms())</span>
<span id="cb14-4">big_cat_dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> big_cat.dataloaders(path)</span>
<span id="cb14-5">big_cat_dls.train.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect2/Lecture_2_Production_Self_files/Lecture_2_Production_Self_21_0.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">png</figcaption>
</figure>
</div>
</section>
<section id="train-the-model" class="level2">
<h2 class="anchored" data-anchor-id="train-the-model">3. Train the model</h2>
<p><strong>Tip1</strong> - Prioritaize to train a quick and simple model first, rather than going for big model directly.</p>
<p><strong>Tip2</strong> - Build model first and then clean the data. And then again train the model.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(big_cat_dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb15-2">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<table class="table">
<colgroup>
<col style="width: 11%">
<col style="width: 18%">
<col style="width: 18%">
<col style="width: 18%">
<col style="width: 11%">
</colgroup>
<thead>
<tr class="header">
<th>epoch</th>
<th>train_loss</th>
<th>valid_loss</th>
<th>error_rate</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.878671</td>
<td>0.548061</td>
<td>0.183962</td>
<td>00:36</td>
</tr>
</tbody>
</table>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<table class="table">
<colgroup>
<col style="width: 11%">
<col style="width: 18%">
<col style="width: 18%">
<col style="width: 18%">
<col style="width: 11%">
</colgroup>
<thead>
<tr class="header">
<th>epoch</th>
<th>train_loss</th>
<th>valid_loss</th>
<th>error_rate</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.669399</td>
<td>0.442041</td>
<td>0.160377</td>
<td>00:36</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.566393</td>
<td>0.425440</td>
<td>0.136792</td>
<td>00:38</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.476826</td>
<td>0.555463</td>
<td>0.179245</td>
<td>00:38</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.429597</td>
<td>0.524273</td>
<td>0.146226</td>
<td>00:37</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.367606</td>
<td>0.519690</td>
<td>0.117925</td>
<td>00:36</td>
</tr>
<tr class="even">
<td>5</td>
<td>0.319734</td>
<td>0.529199</td>
<td>0.113208</td>
<td>00:37</td>
</tr>
<tr class="odd">
<td>6</td>
<td>0.287094</td>
<td>0.516044</td>
<td>0.127358</td>
<td>00:38</td>
</tr>
<tr class="even">
<td>7</td>
<td>0.260760</td>
<td>0.514551</td>
<td>0.132075</td>
<td>00:36</td>
</tr>
</tbody>
</table>
<p>Here we see, in last epoch rise in error_rate which means that in stochastic gradient descent we have surpassed deepest point and trending towards upward direction which leads to higher loss rate. It indicates that the training process should likely be stopped to prevent further divergence from the optimal solution</p>
<p>###Visualize Confusion Matrix</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">interp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClassificationInterpretation.from_learner(learn)</span>
<span id="cb16-2">interp.plot_confusion_matrix()</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect2/Lecture_2_Production_Self_files/Lecture_2_Production_Self_26_4.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">png</figcaption>
</figure>
</div>
<p><code>plot_top_losses</code> shows us the images with the highest loss in our dataset.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">interp.plot_top_losses(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect2/Lecture_2_Production_Self_files/Lecture_2_Production_Self_28_2.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">png</figcaption>
</figure>
</div>
</section>
<section id="clean-the-data" class="level2">
<h2 class="anchored" data-anchor-id="clean-the-data">4. Clean the data</h2>
<p><code>ImageClassifierCleaner</code> enables us to review all images associated with a specific category and identify their placement within the dataloader, whether in the training or validation set.</p>
<p>The images are organized in ascending order of confidence, prioritizing those with the highest loss. This allows for efficient data sorting by simply examining the initial images. Users can choose to keep, delete, or modify the category label (type of cat) as required</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#hide_output</span></span>
<span id="cb18-2">cleaner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageClassifierCleaner(learn)</span>
<span id="cb18-3">cleaner</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<pre><code>VBox(children=(Dropdown(options=('Cheetah', 'Cougar', 'Leopard', 'Lion', 'SnowLeopard', 'Tiger'), value='Cheet…</code></pre>
<p>The <code>Cleaner</code> possesses information regarding the files we deleted and whose labels we modified. Now, we will implement these changes.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"></span>
<span id="cb20-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cleaner.delete(): cleaner.fns[idx].unlink()</span>
<span id="cb20-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx,cat <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cleaner.change(): shutil.move(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(cleaner.fns[idx]), path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>cat)</span></code></pre></div>
</section>
<section id="re-train-the-model-using-updated-data" class="level2">
<h2 class="anchored" data-anchor-id="re-train-the-model-using-updated-data">5. Re train the model using updated data</h2>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">big_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(</span>
<span id="cb21-2">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ImageBlock, CategoryBlock),</span>
<span id="cb21-3">    get_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_image_files,</span>
<span id="cb21-4">    splitter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb21-5">    get_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parent_label,</span>
<span id="cb21-6">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>))</span>
<span id="cb21-7">big_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> big_cat.new(</span>
<span id="cb21-8">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomResizedCrop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb21-9">    batch_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms())</span>
<span id="cb21-10">big_cat_dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> big_cat.dataloaders(path)</span>
<span id="cb21-11">big_cat_dls.train.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect2/Lecture_2_Production_Self_files/Lecture_2_Production_Self_35_0.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">png</figcaption>
</figure>
</div>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(big_cat_dls, resnet34, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb22-2">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
<pre><code>Downloading: "https://download.pytorch.org/models/resnet34-b627a593.pth" to /root/.cache/torch/hub/checkpoints/resnet34-b627a593.pth
100%|██████████| 83.3M/83.3M [00:00&lt;00:00, 121MB/s]</code></pre>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<table class="table">
<colgroup>
<col style="width: 11%">
<col style="width: 18%">
<col style="width: 18%">
<col style="width: 18%">
<col style="width: 11%">
</colgroup>
<thead>
<tr class="header">
<th>epoch</th>
<th>train_loss</th>
<th>valid_loss</th>
<th>error_rate</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.839337</td>
<td>0.557398</td>
<td>0.161137</td>
<td>00:36</td>
</tr>
</tbody>
</table>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<table class="table">
<colgroup>
<col style="width: 11%">
<col style="width: 18%">
<col style="width: 18%">
<col style="width: 18%">
<col style="width: 11%">
</colgroup>
<thead>
<tr class="header">
<th>epoch</th>
<th>train_loss</th>
<th>valid_loss</th>
<th>error_rate</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.552628</td>
<td>0.516515</td>
<td>0.137441</td>
<td>00:37</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.457381</td>
<td>0.544474</td>
<td>0.175355</td>
<td>00:42</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.399777</td>
<td>0.615449</td>
<td>0.146919</td>
<td>00:38</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.345620</td>
<td>0.601597</td>
<td>0.151659</td>
<td>00:40</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.293677</td>
<td>0.630620</td>
<td>0.146919</td>
<td>00:37</td>
</tr>
<tr class="even">
<td>5</td>
<td>0.256501</td>
<td>0.669779</td>
<td>0.137441</td>
<td>00:37</td>
</tr>
<tr class="odd">
<td>6</td>
<td>0.227690</td>
<td>0.648144</td>
<td>0.142180</td>
<td>00:36</td>
</tr>
<tr class="even">
<td>7</td>
<td>0.207254</td>
<td>0.651927</td>
<td>0.137441</td>
<td>00:37</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">interp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClassificationInterpretation.from_learner(learn)</span>
<span id="cb24-2">interp.plot_confusion_matrix()</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect2/Lecture_2_Production_Self_files/Lecture_2_Production_Self_37_4.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">png</figcaption>
</figure>
</div>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">interp.plot_top_losses(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect2/Lecture_2_Production_Self_files/Lecture_2_Production_Self_38_2.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">png</figcaption>
</figure>
</div>
<section id="so-by-reading-confusion-matrix-and-looking-at-output-from-plot_top_losses-we-can-say-that-we-still-have-a-problem-with-our-data-and-it-will-take-a-lot-more-iteration-to-fix-it.-for-now-lets-conclude-our-efforts-at-this-point." class="level4">
<h4 class="anchored" data-anchor-id="so-by-reading-confusion-matrix-and-looking-at-output-from-plot_top_losses-we-can-say-that-we-still-have-a-problem-with-our-data-and-it-will-take-a-lot-more-iteration-to-fix-it.-for-now-lets-conclude-our-efforts-at-this-point.">So by reading confusion matrix and looking at output from plot_top_losses, we can say that we still have a problem with our data and it will take a lot more iteration to fix it. For now, let’s conclude our efforts at this point.</h4>
</section>
</section>
<section id="lets-download-our-model-and-use-it-make-prediction.-in-next-lesson-." class="level2">
<h2 class="anchored" data-anchor-id="lets-download-our-model-and-use-it-make-prediction.-in-next-lesson-.">6. Let’s download our model and use it make prediction. In next lesson 😊.</h2>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">learn.export(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lecture2_Big_Cat_Model.pkl'</span>)</span></code></pre></div>
</section>
<section id="live-model" class="level2">
<h2 class="anchored" data-anchor-id="live-model">7. Live Model</h2>
<p>You can access live model <a href="https://huggingface.co/spaces/mekanavsharma/minima">here</a> deployed using Hugging Face &amp; gradio. Wanna know how to do it ? refer <a href="https://www.tanishq.ai/blog/posts/2021-11-16-gradio-huggingface.html">Gradio-HuggingFace</a>.</p>
<p>You can access repo <a href="https://huggingface.co/spaces/mekanavsharma/minima/tree/main">here</a></p>


</section>
</section>

 ]]></description>
  <category>Computer Vision</category>
  <category>FastAI</category>
  <guid>https://mekanavsharma.github.io/Blog/posts/FastAI_Course_Lect2/index.html</guid>
  <pubDate>Mon, 08 Apr 2024 18:30:00 GMT</pubDate>
</item>
<item>
  <title>How I got multiple offers and Landed My Dream Job in Fintech</title>
  <dc:creator>Kanav Sharma</dc:creator>
  <link>https://mekanavsharma.github.io/Blog/posts/Job-Search/index.html</link>
  <description><![CDATA[ 




<p>Are you tired of feeling stuck in your career? Do you dream of making a significant change but don’t know where to start? As a data scientist specializing in time series modeling and regression-based models using R, I felt exactly the same way. But I’m here to tell you that with the right mindset and a little bit of hard work, anything is possible.</p>
<section id="introduction-my-career-shift-story-and-how-you-can-do-it-too" class="level2">
<h2 class="anchored" data-anchor-id="introduction-my-career-shift-story-and-how-you-can-do-it-too">Introduction: My career shift story and how you can do it too</h2>
<p>I made the decision to shift my career from the energy sector to either health or finance industries, with a goal of securing a job that would offer at least a 120% salary increase from my current position, ideally in the FinTech space. And guess what? I not only achieved that goal but also landed my dream job!</p>
<p>Don’t settle for a career that doesn’t excite you. Take charge of your future and make the change you’ve been dreaming of. Join me on this journey, and let’s make 2023 the year of success and fulfillment!</p>
<p>In this blog post, I’ll share my journey with you and provide valuable insights and tips for how you too can make a career shift and achieve your dream job. From studying Python and machine learning basics to creating resumes and profiles on job portals, I’ll guide you through the entire process. I’ll also share my experience with the roller-coaster of interviews and how I overcame my lack of knowledge in machine learning algorithms.</p>
</section>
<section id="initial-plan-and-challenges" class="level2">
<h2 class="anchored" data-anchor-id="initial-plan-and-challenges">Initial plan and challenges</h2>
<p>Back in September, I had planned to study Python and machine learning basics for a month before creating an online profile. Unfortunately, my motivation dwindled and I spent two months halfheartedly reading articles and making notes out of them. Nonetheless, I eventually created a resume using resources like <a href="https://www.youtube.com/@codebasics">codebasics</a> and Krish Naik’s videos and established profiles on job portals such as Naukri and LinkedIn. Soon after, I started receiving calls from various organizations, but the interview process was a reality check for me as my understanding of machine learning algorithms was only surface-level.</p>
</section>
<section id="learning-from-failures" class="level2">
<h2 class="anchored" data-anchor-id="learning-from-failures">Learning from failures</h2>
<p>In November, I learned some valuable lessons through my experiences.I would usually clear first round but would fail in second round one such example was I confidently answered questions related to my resume but was stumped when asked to elaborate on categorical data encoding like difference between label and hot encoding. Similarly, when asked about hypothesis testing, I gave a confused response and said alpha was 0.5 instead of 0.05. Despite making notes on Krish Naik’s Live <a href="https://www.youtube.com/watch?v=11unm2hmvOQ&amp;list=PLZoTAELRMXVMgtxAboeAx-D9qbnY94Yay&amp;ab_channel=KrishNaik">Statistics playlist</a>, I hadn’t covered these topics sincerely.</p>
<p>However, instead of giving up, I used these experiences as motivation to learn and grow. I went back to my notes, re-studied the topics where I had made mistakes, and updated my notes accordingly. I realized that learning is a continuous process and that we can always improve.</p>
<p>In the introduction, it is mentioned that I have specialized in time series data. However, due to the limited availability of data for some clients, I did not have much exposure to seasonal data and had only relied on regression-based models for time series analysis. Although I had previously attempted to use models such as Prophet and ARIMA, they did not yield favorable results, and I had not included them in my resume nor prepared them for the interviews. Unfortunately, during a technical interview(3rd technical round), I was asked about ACF, PACF, and the ADF test, and I was unable to answer these questions. To address this knowledge gap, I dedicated the next few weeks to learning the basics of time series terminology and models.</p>
<section id="gaining-confidence" class="level3">
<h3 class="anchored" data-anchor-id="gaining-confidence">Gaining confidence</h3>
<p>Despite a dry spell in December where I didn’t receive any recruiter calls, I didn’t lose hope. Instead, I gained the confidence needed to crack technical interviews. I made sure to prepare well, studying topics in which I was lacking.</p>
</section>
</section>
<section id="silver-lining" class="level2">
<h2 class="anchored" data-anchor-id="silver-lining">Silver Lining</h2>
<p>Long story short in January, I had received two offers with a 50% salary increase, but they were not in the FinTech industry, which was my goal. I was satisfied but not happy. Then, I cleared the first round of interviews for two companies, X and Y, on the same day while having a high fever (I’m not blowing my own trumpet, I mentioned this to make the point that if you work hard you will gain confidence eventually). One of the interviewers suggested I should reschedule, but I declined as I did not want to tarnish my reputation.</p>
</section>
<section id="alls-well-that-ends-well" class="level2">
<h2 class="anchored" data-anchor-id="alls-well-that-ends-well">All’s Well that Ends Well</h2>
<p>In February, I received an offer letter from company X with a 95% salary increase. During my last round of interviews with company Y, I showed them this offer, and they offered me a 150% salary increase, which was a dream come true. I deleted my profile from Naukri and this company Y happened to be TransUnion, a FinTech company where I joined as a Senior Analyst.</p>
</section>
<section id="the-reality-of-recruitment-process" class="level2">
<h2 class="anchored" data-anchor-id="the-reality-of-recruitment-process">The Reality of Recruitment Process</h2>
<p>I realized early on that the recruitment process is not always straightforward. I cleared the first round in one organization, only to be informed weeks later that they had filled the position internally. In two other organizations, after clearing the first round, I was later told that openings were closed. In another organization, I cleared three rounds and even submitted my documents, only to be told later that I was the second priority and the position was filled via referral. However, I didn’t let these setbacks discourage me, and I continued to persevere.</p>
</section>
<section id="the-journey-continues" class="level2">
<h2 class="anchored" data-anchor-id="the-journey-continues">The Journey Continues</h2>
<p>I learned that mistakes are an integral part of the learning process. Even though I had an offer from TransUnion I gave another interview (just of fun). The interview taught me about SARIMAX (we can use this for multivariate time series) and I knew only about ARIMA,SARIMA etc. which are univariate models. It was a humbling experience, but it taught me a valuable lesson that ‘You may think you know but actually you don’t’.</p>
</section>
<section id="insights" class="level2">
<h2 class="anchored" data-anchor-id="insights">Insights</h2>
<p>1. Set a clear and measurable goal for yourself.</p>
<p>2. I found that building a strong online profile is essential when looking for job opportunities even before you started preparing because it take time to get a call.</p>
<p>3. Make your resume plain and simple. Tailor your resume and cover letter to each position. Highlight your relevant skills and experience and show how you can add value to the company.</p>
<p>4. Prepare for interviews by researching the company and practicing your responses to common interview questions. Dress professionally and arrive on time.</p>
<p>5. It’s better to have a deep understanding of a few machine learning algorithms rather than a superficial understanding of many.</p>
<p>6. Interviews can be nerve-wracking, but it’s essential to remain calm and not let anxiety take over.</p>
<p>7. Keep your notes updated and review them regularly</p>
<p>8. Follow up after interviews with a thank-you email or note, and express your continued interest in the position and also ask for the feed back(very important).</p>
<p>9. There is no such thing called as perfect interview, you can’t answer 100% of the questions.</p>
<p>10. Don’t be afraid to negotiate job offers. Do your research on salary ranges for the position and make a counter offer if necessary. <strong>This is the most important tip I can give you, as it can make a huge difference in your income and satisfaction.</strong></p>
</section>
<section id="study-sources" class="level2">
<h2 class="anchored" data-anchor-id="study-sources">Study Sources</h2>
<p>I found the book “<a href="https://amzn.eu/d/6lPwBfQ">Approaching Almost Any Machine Learning Problem</a>” by <a href="https://twitter.com/abhi1thakur">Abhishek Thakur</a> to be an excellent resource for building a strong foundation in machine learning.</p>
<p>I also relied heavily on online resources like <a href="https://www.youtube.com/@statquest">Statquest</a> and <a href="https://www.youtube.com/@krishnaik06">Krish Naik’s</a> videos, as well as blogs on various websites like Medium, Towards Data Science, and Analytics Vidhya, like for Decision tree I think KDnuggets have one of the finest <a href="https://www.kdnuggets.com/2020/01/decision-tree-algorithm-explained.html">blog</a> on it.</p>
<p><a href="https://huyenchip.com/ml-interviews-book/">Machine Learning Interviews Book by Chip Huyen</a> was another source from where I learned non technical (like how to negotiate salary) &amp; technical aspect of interview.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In conclusion, my journey to landing a Senior Analyst role in a FinTech company was not easy, but it taught me valuable lessons about perseverance, learning from mistakes, and the importance of building a strong online profile. I hope my journey can inspire others to pursue their dreams and never give up, no matter how challenging the journey may be.</p>
<p><strong>Hope</strong> that’s the key, be willing to work hard ‘<em>you will get success may not be today but tomorrow you surely will</em>’.</p>


</section>

 ]]></description>
  <category>Informative</category>
  <category>Interview</category>
  <guid>https://mekanavsharma.github.io/Blog/posts/Job-Search/index.html</guid>
  <pubDate>Wed, 22 Mar 2023 18:30:00 GMT</pubDate>
  <media:content url="https://mekanavsharma.github.io/Blog/posts/Job-Search/image.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
